/*
Navicat MySQL Data Transfer

Source Server         : localhost
Source Server Version : 50717
Source Host           : localhost:3306
Source Database       : saintic

Target Server Type    : MYSQL
Target Server Version : 50717
File Encoding         : 65001

Date: 2017-04-25 23:21:39
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for blog_article
-- ----------------------------
DROP TABLE IF EXISTS `blog_article`;
CREATE TABLE `blog_article` (
  `id` int(4) NOT NULL AUTO_INCREMENT COMMENT 'BlogId',
  `title` varchar(88) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL COMMENT '文章标题',
  `content` varchar(20000) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL COMMENT '文章',
  `create_time` varchar(20) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '文章创建时间',
  `update_time` varchar(20) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '文章更新时间',
  `tag` varchar(30) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT '技术' COMMENT '文章标签',
  `catalog` varchar(30) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT '未分类' COMMENT '文章分类目录',
  `sources` varchar(30) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT '原创' COMMENT '''Original\n,Reprint\n,Translate|原创,转载,翻译''',
  `author` varchar(255) DEFAULT 'admin',
  `recommend` varchar(5) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT 'false',
  `top` varchar(5) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT 'false',
  PRIMARY KEY (`id`),
  KEY `id` (`id`,`create_time`,`tag`,`catalog`,`sources`,`author`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=221 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_article
-- ----------------------------
INSERT INTO `blog_article` VALUES ('86', 'Python获取系统信息(CPU、Mem、Disk、Network、User等)', '           <pre style=\"max-width: 100%;\"><code class=\"python hljs\" codemark=\"1\"><span class=\"hljs-comment\">#!/usr/bin/env python</span>\r\n<span class=\"hljs-comment\">#coding:utf8</span>\r\n<span class=\"hljs-comment\">#get system info from psutil</span>\r\n<span class=\"hljs-comment\">#required:psutil</span>\r\n<span class=\"hljs-keyword\">try</span>:\r\n    <span class=\"hljs-keyword\">import</span> sys,psutil,platform,commands,json,socket,os\r\n<span class=\"hljs-keyword\">except</span> ImportError <span class=\"hljs-keyword\">as</span> msg:\r\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"Import Error, because %s\"</span> % msg\r\n    sys.exit(<span class=\"hljs-number\">1</span>)\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SysInfo</span><span class=\"hljs-params\">()</span>:</span>\r\n    sys_ip=socket.gethostbyname(socket.gethostname())\r\n    <span class=\"hljs-keyword\">try</span>:\r\n        client_ip=os.environ[<span class=\"hljs-string\">\'SSH_CONNECTION\'</span>].split()[<span class=\"hljs-number\">0</span>]\r\n    <span class=\"hljs-keyword\">except</span>:\r\n        client_ip=<span class=\"hljs-string\">\'unknown\'</span>\r\n    sys_version=platform.linux_distribution()\r\n    sys_fqdn=platform.uname()[<span class=\"hljs-number\">1</span>]   <span class=\"hljs-comment\">#hostname,eg:localhost.localdomain</span>\r\n    sys_kernel=platform.uname()[<span class=\"hljs-number\">2</span>] <span class=\"hljs-comment\">#kernel version</span>\r\n    sys_arch=platform.uname()[<span class=\"hljs-number\">4</span>]   <span class=\"hljs-comment\">#eg:x86_64 amd64 win32</span>\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">hostname</span><span class=\"hljs-params\">(self)</span>:</span>\r\n        <span class=\"hljs-keyword\">return</span> json.dumps({<span class=\"hljs-string\">\"Hostname\"</span>: self.sys_fqdn})\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">ip</span><span class=\"hljs-params\">(self)</span>:</span>\r\n        <span class=\"hljs-keyword\">return</span> json.dumps({<span class=\"hljs-string\">\"ServerIP\"</span>: self.sys_ip, <span class=\"hljs-string\">\'SSH_Client_IP\'</span>: self.client_ip})\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">Kernel</span><span class=\"hljs-params\">(self)</span>:</span>\r\n        <span class=\"hljs-keyword\">return</span> json.dumps({<span class=\"hljs-string\">\"Kernel\"</span>: self.sys_kernel})\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">Arch</span><span class=\"hljs-params\">(self)</span>:</span>\r\n        <span class=\"hljs-keyword\">return</span> json.dumps({<span class=\"hljs-string\">\"Arch\"</span>: self.sys_arch})\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">Version</span><span class=\"hljs-params\">(self)</span>:</span>\r\n        <span class=\"hljs-keyword\">return</span> json.dumps({<span class=\"hljs-string\">\"SysVersion\"</span>: self.sys_version})\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">CPU</span><span class=\"hljs-params\">(self)</span>:</span>\r\n        cpu_label=str(commands.getoutput(<span class=\"hljs-string\">\'grep \"model name\" /proc/cpuinfo | awk -F \": \" \\\'{print $2}\\\' | head -1\'</span>))\r\n        cpu_cache=str(commands.getoutput(<span class=\"hljs-string\">\'grep \"cache size\" /proc/cpuinfo|uniq|awk \\\'{print $4,$5}\\\'\'</span>))\r\n        cpu_time=psutil.cpu_times()\r\n        cpu_logical_nums=psutil.cpu_count()\r\n        cpu_physical_nums=psutil.cpu_count(logical=<span class=\"hljs-keyword\">False</span>)\r\n        <span class=\"hljs-keyword\">return</span> json.dumps({<span class=\"hljs-string\">\"Label\"</span>: str(cpu_label), <span class=\"hljs-string\">\"Logical\"</span>: int(cpu_logical_nums), <span class=\"hljs-string\">\"Cache_size\"</span>: str(cpu_cache)})\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">MEM</span><span class=\"hljs-params\">(self)</span>:</span>\r\n        mem=psutil.virtual_memory()\r\n        total=mem.total\r\n        free=mem.free\r\n        mem_total=str(total / <span class=\"hljs-number\">1024</span> / <span class=\"hljs-number\">1024</span>) + <span class=\"hljs-string\">\'M\'</span>\r\n        mem_free=str(free / <span class=\"hljs-number\">1024</span> / <span class=\"hljs-number\">1024</span>) + <span class=\"hljs-string\">\'M\'</span>\r\n        <span class=\"hljs-keyword\">try</span>:\r\n            buffers=mem.buffers\r\n            cached=mem.cached\r\n            UsedPerc=<span class=\"hljs-number\">100</span> * int(total - free - cached - buffers) / int(total)\r\n\r\n            memused=str(UsedPerc)+<span class=\"hljs-string\">\'%\'</span>\r\n            <span class=\"hljs-keyword\">return</span> json.dumps({<span class=\"hljs-string\">\"Total\"</span>: mem_total, <span class=\"hljs-string\">\"Free\"</span>: mem_free, <span class=\"hljs-string\">\"Memory_UsageRate\"</span>: memused})\r\n        <span class=\"hljs-keyword\">except</span> AttributeError:\r\n            <span class=\"hljs-keyword\">return</span> json.dumps({<span class=\"hljs-string\">\"Total\"</span>: mem_total, <span class=\"hljs-string\">\"Free\"</span>: mem_free})\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">DISK</span><span class=\"hljs-params\">(self)</span>:</span>\r\n        ps=<span class=\"hljs-number\">0</span>\r\n        pt=[]\r\n        <span class=\"hljs-keyword\">while</span> ps &lt; len(psutil.disk_partitions()):\r\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">3</span>):\r\n                pt.append(psutil.disk_partitions()[ps][i])\r\n                pt.append(str(psutil.disk_usage(psutil.disk_partitions()[ps][<span class=\"hljs-number\">1</span>])[<span class=\"hljs-number\">-1</span>])+<span class=\"hljs-string\">\'%\'</span>)\r\n                ps+=<span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">return</span> json.dumps({<span class=\"hljs-string\">\"Partitions\"</span>: len(psutil.disk_partitions()), <span class=\"hljs-string\">\"DiskInfo\"</span>: pt})\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">NETWORK</span><span class=\"hljs-params\">(self)</span>:</span>\r\n        net_io=psutil.net_io_counters(pernic=<span class=\"hljs-keyword\">False</span>)[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">4</span>]\r\n        <span class=\"hljs-keyword\">return</span> json.dumps({<span class=\"hljs-string\">\"NetworkFlow\"</span>: str(net_io)})\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">OTHER</span><span class=\"hljs-params\">(self)</span>:</span>\r\n        login_users=len(psutil.users())\r\n        pid_nums=len(psutil.pids())\r\n        <span class=\"hljs-keyword\">return</span> json.dumps({<span class=\"hljs-string\">\"LoginUserNums\"</span>: int(login_users), <span class=\"hljs-string\">\"PidNums\"</span>: int(pid_nums)})\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\'__main__\'</span>:\r\n    info=SysInfo()\r\n    <span class=\"hljs-keyword\">print</span> info.hostname()\r\n    <span class=\"hljs-keyword\">print</span> info.ip()\r\n    <span class=\"hljs-keyword\">print</span> info.Version()\r\n    <span class=\"hljs-keyword\">print</span> info.Kernel()\r\n    <span class=\"hljs-keyword\">print</span> info.Arch()\r\n    <span class=\"hljs-keyword\">print</span> info.CPU()\r\n    <span class=\"hljs-keyword\">print</span> info.MEM()\r\n    <span class=\"hljs-keyword\">print</span> info.DISK()\r\n    <span class=\"hljs-comment\">#print info.NETWORK()</span>\r\n    <span class=\"hljs-keyword\">print</span> info.OTHER()</code></pre><p><br></p>', '2016-10-27', '2016-12-14 00:00:00', 'python', 'Python', '原创', 'taochengwei', 'false', 'false');
INSERT INTO `blog_article` VALUES ('87', '百度站长平台主动推送(实时)链接接口示例', '           <p>           <p>我们有了自己的网站后，基本上都想办法向搜索引擎推送自己的URL。</p><p>1、Google Search Console是谷歌的搜索管理系统，添加自己的站点后google bot会主动爬你的站。</p><p>2、Baiduspider一般不会主动爬，不过你可以用百度站长平台(<a href=\"http://zhanzhang.baidu.com/linksubmit/index\" target=\"_blank\">http://zhanzhang.baidu.com/linksubmit/index</a>)提供的主动推送(实时)接口自动提交URLs。</p><p><br></p><p>在这里，我们用curl访问接口的方式推送一个包含所有URL列表的文件，不过需要注意的是，你推送的URL应该与百度站长平台上验证的站点一致。</p><p>以本站为例，我在百度站长平台上添加了www.saintic.com，到网页抓取-链接提交下，看到自动提交下有个主动推送(实时)，其中有你站点和token信息，看到curl推送示例，主要就是它。</p><p></p><p>以下是我的简单推送脚本，因为百度有推送数量限制，所以放到crontab中每三个小时运行一次。</p><pre style=\"max-width: 100%;\"><code class=\"bash hljs\" codemark=\"1\"><span class=\"hljs-meta\">#!/bin/bash</span>\r\n<span class=\"hljs-comment\">#要求有mailx包，开启了邮件服务</span>\r\nci_dir=/tmp/baidu_ci\r\nci_urls=<span class=\"hljs-variable\">${ci_dir}</span>/urls.txt\r\nci_r=<span class=\"hljs-variable\">${ci_dir}</span>/ci_result.txt\r\n[ <span class=\"hljs-_\">-d</span> <span class=\"hljs-variable\">$ci_dir</span> ] || mkdir -p <span class=\"hljs-variable\">$ci_dir</span>\r\n[ <span class=\"hljs-_\">-f</span> <span class=\"hljs-variable\">$ci_urls</span> ] &amp;&amp; rm <span class=\"hljs-_\">-f</span> <span class=\"hljs-variable\">$ci_urls</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-title\">check</span></span>() {\r\n   code=$(curl -I <span class=\"hljs-_\">-s</span> <span class=\"hljs-variable\">$url</span> |head -1|awk -F <span class=\"hljs-string\">\"HTTP/1.1 \"</span> <span class=\"hljs-string\">\'{print $2}\'</span>|awk <span class=\"hljs-string\">\'{print $1}\'</span>)\r\n   <span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$code</span>\"</span> = <span class=\"hljs-string\">\"200\"</span> ];<span class=\"hljs-keyword\">then</span>\r\n     <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$url</span> &gt;&gt; <span class=\"hljs-variable\">$ci_urls</span>\r\n   <span class=\"hljs-keyword\">fi</span>\r\n}\r\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"http://www.saintic.com/\"</span> &gt; <span class=\"hljs-variable\">$ci_urls</span>\r\nstatic_urls=(\r\n    <span class=\"hljs-string\">\"http://www.saintic.com/about/\"</span>\r\n)\r\n\r\n<span class=\"hljs-keyword\">for</span> url <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable\">${static_urls[@]}</span>\r\n<span class=\"hljs-keyword\">do</span>\r\n   check\r\n<span class=\"hljs-keyword\">done</span> \r\n\r\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> {1..20}\r\n<span class=\"hljs-keyword\">do</span>\r\n   url=http://www.saintic.com/blog/<span class=\"hljs-variable\">${i}</span>.html\r\n   check\r\n<span class=\"hljs-keyword\">done</span>\r\n\r\ncurl <span class=\"hljs-_\">-s</span> -H <span class=\"hljs-string\">\'Content-Type:text/plain\'</span> --data-binary @<span class=\"hljs-variable\">$ci_urls</span> <span class=\"hljs-string\">\"http://data.zz.baidu.com/urls?site=此处改为你的站点&amp;token=此处是你的token&amp;type=original\"</span> &gt; <span class=\"hljs-variable\">$ci_r</span>\r\n<span class=\"hljs-comment\">#此处的curl就是你在百度站长平台看到的curl推送示例，其中@urls.txt改为@$ci_urls即可。</span>\r\n\r\npush_nums=$(jq .success <span class=\"hljs-variable\">${ci_r}</span>)\r\nfail_code=$(jq .error <span class=\"hljs-variable\">${ci_r}</span>)\r\nfail_msg=$(jq .message <span class=\"hljs-variable\">${ci_r}</span>)\r\n\r\n<span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-variable\">$push_nums</span> = <span class=\"hljs-string\">\"0\"</span> ];<span class=\"hljs-keyword\">then</span>\r\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$(date +%Y-%m-%d,%H:%M:%S)</span>,推送异常，推送结果成功但条数为0！！！\"</span> | mailx -r <span class=\"hljs-string\">\"Baidu_ci@saintic.com\"</span> <span class=\"hljs-_\">-s</span> <span class=\"hljs-string\">\"百度实时推送:FAIL\"</span> staugur@vip.qq.com\r\n    <span class=\"hljs-built_in\">exit</span> 1\r\n<span class=\"hljs-keyword\">fi</span>\r\n\r\n<span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$push_nums</span>\"</span> != <span class=\"hljs-string\">\"null\"</span> ];<span class=\"hljs-keyword\">then</span>\r\n    mailx -r <span class=\"hljs-string\">\"Baidu_ci@saintic.com\"</span> <span class=\"hljs-_\">-s</span> <span class=\"hljs-string\">\"百度实时推送:SUCCESS\"</span> -c <span class=\"hljs-string\">\"staugur@saintic.com\"</span> staugur@vip.qq.com &lt;&lt;EOF\r\n$(date +%Y-%m-%d,%H:%M:%S),成功推送<span class=\"hljs-variable\">${push_nums}</span>条记录。\r\n推送列表:\r\n$(cat <span class=\"hljs-variable\">${ci_urls}</span>)\r\nEOF\r\n<span class=\"hljs-keyword\">else</span>\r\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$(date +%Y-%m-%d,%H:%M:%S)</span>,推送错误,错误代码:<span class=\"hljs-variable\">${fail_code}</span>,原因是:<span class=\"hljs-variable\">${fail_msg}</span>.\"</span> | mailx -r <span class=\"hljs-string\">\"Baidu_ci@saintic.com\"</span> <span class=\"hljs-_\">-s</span> <span class=\"hljs-string\">\"百度实时推送:FAIL\"</span> staugur@vip.qq.com\r\n<span class=\"hljs-keyword\">fi</span></code></pre><p><br></p></p>\r\n        ', '2016-10-27', '2016-12-23 00:00:00', '站长 shell 搜索', 'shell', '原创', 'taochengwei', 'true', 'true');
INSERT INTO `blog_article` VALUES ('88', '生成复杂随机密码', '           <p>复杂度可以自己修改，默认生成15个字符，可以带一个数字参数，指定生成的长度。</p><pre style=\"max-width: 100%;\"><code class=\"bash hljs\" codemark=\"1\"><span class=\"hljs-meta\">#!/bin/bash</span>\r\n<span class=\"hljs-comment\">#生成复杂随机密码</span>\r\nL=12\r\n<span class=\"hljs-keyword\">if</span> [ ! -z <span class=\"hljs-variable\">$1</span> ];<span class=\"hljs-keyword\">then</span>\r\n  <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>\"</span> =~ ^[0-9]+$ ]];<span class=\"hljs-keyword\">then</span>\r\n    L=<span class=\"hljs-variable\">$1</span>\r\n  <span class=\"hljs-keyword\">fi</span>\r\n<span class=\"hljs-keyword\">fi</span>\r\n&lt;/dev/urandom tr -dc <span class=\"hljs-string\">\'1234567890!@#%$qwertQWERTasdfgASDFGzxcvbZXCVBCdgFsY_lMt\'</span> | head -c<span class=\"hljs-variable\">${L}</span>; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"\"</span></code></pre><p><br></p>', '2016-10-27', null, 'shell', 'shell', '原创', 'taochengwei', 'false', 'false');
INSERT INTO `blog_article` VALUES ('89', 'Update nginx version', '           <pre style=\"max-width: 100%;\"><code class=\"bash hljs\" codemark=\"1\"><span class=\"hljs-meta\">#!/bin/bash</span>\r\nv=1.8.0\r\nnginx=/usr/<span class=\"hljs-built_in\">local</span>/nginx\r\npid=<span class=\"hljs-variable\">${nginx}</span>/logs/nginx.pid\r\npidbin=<span class=\"hljs-variable\">${nginx}</span>/logs/nginx.pid.oldbin\r\n<span class=\"hljs-built_in\">exec</span>=`<span class=\"hljs-built_in\">which</span> nginx`\r\n[ <span class=\"hljs-string\">\"$?\"</span> = <span class=\"hljs-string\">\"0\"</span> ] || <span class=\"hljs-built_in\">exit</span> 1\r\n<span class=\"hljs-variable\">$exec</span> -V &amp;&gt; /tmp/nginx_V\r\nargs=$(awk -F <span class=\"hljs-string\">\"configure arguments:\"</span> <span class=\"hljs-string\">\'{print $2}\'</span> /tmp/nginx_V | grep -v <span class=\"hljs-string\">\"^$\"</span>)\r\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\'If your nginx has third party modules, that is, use the \"--add-module\" parameter, move the module directory to the same location as the current nginx build!\'</span>\r\n<span class=\"hljs-built_in\">read</span> -p <span class=\"hljs-string\">\"Continue yes?(y/n)\"</span> NEXT\r\n[ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$NEXT</span>\"</span> = <span class=\"hljs-string\">\"n\"</span> ] &amp;&amp; <span class=\"hljs-built_in\">exit</span> 1 || <span class=\"hljs-built_in\">echo</span> Continue Yes!\r\nwget -c http://nginx.org/download/nginx-<span class=\"hljs-variable\">$v</span>.tar.gz\r\n[ <span class=\"hljs-_\">-f</span> nginx-<span class=\"hljs-variable\">$v</span>.tar.gz ] || <span class=\"hljs-built_in\">exit</span> 1 &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"No version.\"</span>\r\ntar zxf nginx-<span class=\"hljs-variable\">$v</span>.tar.gz\r\n<span class=\"hljs-built_in\">cd</span> nginx-<span class=\"hljs-variable\">$v</span>\r\n./configure <span class=\"hljs-variable\">$args</span>\r\nmake\r\nmv <span class=\"hljs-variable\">$exec</span> /tmp\r\ncp objs/nginx <span class=\"hljs-variable\">$exec</span>\r\n\r\n<span class=\"hljs-built_in\">kill</span>  -USR2 `cat <span class=\"hljs-variable\">$pid</span>`\r\n<span class=\"hljs-built_in\">kill</span>  -WINCH `cat <span class=\"hljs-variable\">$pidbin</span>`\r\n<span class=\"hljs-built_in\">kill</span>  -HUP `cat <span class=\"hljs-variable\">$pidbin</span>`\r\n<span class=\"hljs-built_in\">kill</span>  -QUIT `cat <span class=\"hljs-variable\">$pidbin</span>`\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-title\">s</span></span>() {\r\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Update Successed.\"</span> &amp;&amp; <span class=\"hljs-variable\">$exec</span> -v\r\n  [ -x /tmp/nginx ] &amp;&amp; rm <span class=\"hljs-_\">-f</span> /tmp/nginx\r\n}\r\n<span class=\"hljs-function\"><span class=\"hljs-title\">f</span></span>() {\r\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Update failed.\"</span>\r\n  mv <span class=\"hljs-_\">-f</span> /tmp/nginx <span class=\"hljs-variable\">$exec</span> &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Has rolled back.\"</span>\r\n}\r\n\r\n<span class=\"hljs-variable\">$exec</span> -v &amp;&gt; /dev/null &amp;&amp; s || f</code></pre><p><br></p>', '2016-10-27', null, 'nginx', 'shell', '原创', 'taochengwei', 'false', 'false');
INSERT INTO `blog_article` VALUES ('90', 'Shell 入参类型预检测', '<p>检测Sdp入参，用户名是否冲突、时间期限是否符合正整数、服务|文件类型是否在范围、邮箱是否符合格式等，并将错误信息写入日志。\r\n</p><p>1).用户名若发生冲突，同个用户需要多个服务当前版本必须多次以不同用户名执行;\r\n</p><p>2).使用时间不限，至少1个月;\r\n</p><p>3).服务类型：nginx、httpd、tomcat、mysql、mongodb、redis、memcached;\r\n</p><p>4).文件类型：若为web类型可支持ftp、svn，若为app类型默认无;\r\n</p><p></p><p>5).邮件提醒：部署成功后会发给用户一封服务信息邮件(确保不在垃圾邮件中)，包括服务到期、服务续费、服务停止提醒。\r\n</p><pre style=\"max-width: 100%;\"><code class=\"bash hljs\" codemark=\"1\"><span class=\"hljs-comment\">#判断入参及入参要求是否符合。</span>\r\n<span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$#</span>\"</span> = 5 ]; <span class=\"hljs-keyword\">then</span>\r\n  <span class=\"hljs-comment\">#判断用户是否存在</span>\r\n  <span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-_\">-d</span> <span class=\"hljs-variable\">${INIT_HOME}</span>/<span class=\"hljs-variable\">$1</span> ]; <span class=\"hljs-keyword\">then</span>\r\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-_\">-e</span> <span class=\"hljs-string\">\"\\033[31mThe user already exists\\033[0m\"</span> 2&gt;&amp;1\r\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${PreciseTime}</span> <span class=\"hljs-variable\">$1</span> <span class=\"hljs-variable\">$5</span> ErrAction:\\\"The user already exists\\\"\"</span> &gt;&gt; <span class=\"hljs-variable\">$Errlog</span>\r\n        <span class=\"hljs-built_in\">exit</span> 1\r\n  <span class=\"hljs-keyword\">fi</span>\r\n  <span class=\"hljs-comment\">#判断时间格式</span>\r\n  <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$2</span>\"</span> =~ ^[0-9]+$ ]]; <span class=\"hljs-keyword\">then</span>\r\n    :\r\n  <span class=\"hljs-keyword\">else</span>\r\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"第二个参数要求为正整数，单位为月！\"</span>\r\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${PreciseTime}</span> <span class=\"hljs-variable\">$1</span> <span class=\"hljs-variable\">$5</span> ErrAction:\\\"使用时间参数错误\\\" \"</span> &gt;&gt; <span class=\"hljs-variable\">$Errlog</span>\r\n    <span class=\"hljs-built_in\">exit</span> 1;\r\n  <span class=\"hljs-keyword\">fi</span>\r\n  <span class=\"hljs-comment\">#判断服务类型</span>\r\n  <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${services[@]}</span>\"</span> | grep -w <span class=\"hljs-variable\">$3</span> &amp;&gt; /dev/null ;<span class=\"hljs-keyword\">then</span>\r\n    :\r\n  <span class=\"hljs-keyword\">else</span>\r\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-_\">-e</span> <span class=\"hljs-string\">\"\\033[31m不支持的服务类型\\033[0m\"</span> 2&gt;&amp;1\r\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${PreciseTime}</span> <span class=\"hljs-variable\">$1</span> <span class=\"hljs-variable\">$5</span> ErrAction:\\\"不支持的服务类型\\\"\"</span> &gt;&gt; <span class=\"hljs-variable\">$Errlog</span>\r\n        <span class=\"hljs-built_in\">exit</span> 1\r\n  <span class=\"hljs-keyword\">fi</span>\r\n  <span class=\"hljs-comment\">#判断文件代码类型</span>\r\n  <span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-variable\">$4</span> = <span class=\"hljs-string\">\"svn\"</span> ] || [ <span class=\"hljs-variable\">$4</span> = <span class=\"hljs-string\">\"ftp\"</span> ] || [ <span class=\"hljs-variable\">$4</span> = <span class=\"hljs-string\">\"-\"</span> ] || [ <span class=\"hljs-variable\">$4</span> = <span class=\"hljs-string\">\"null\"</span> ];<span class=\"hljs-keyword\">then</span>\r\n    :\r\n  <span class=\"hljs-keyword\">else</span>\r\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-_\">-e</span> <span class=\"hljs-string\">\"\\033[31m不支持的代码类型\\033[0m\"</span> 2&gt;&amp;1\r\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${PreciseTime}</span> <span class=\"hljs-variable\">$1</span> <span class=\"hljs-variable\">$5</span> ErrAction:\\\"不支持的代码类型\\\"\"</span> &gt;&gt; <span class=\"hljs-variable\">$Errlog</span>\r\n        <span class=\"hljs-built_in\">exit</span> 1\r\n  <span class=\"hljs-keyword\">fi</span>\r\n  <span class=\"hljs-comment\">#判断邮箱格式</span>\r\n  <span class=\"hljs-keyword\">if</span> [[ `<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$5</span> | sed -r <span class=\"hljs-string\">\'/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\\.[a-zA-Z0-9_-])+/!d\'</span>` == <span class=\"hljs-string\">\"\"</span> ]]; <span class=\"hljs-keyword\">then</span>\r\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"邮箱格式不正确！\"</span>\r\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${PreciseTime}</span> <span class=\"hljs-variable\">${init_user}</span> <span class=\"hljs-variable\">${user_email}</span> ErrAction:\\\"邮箱格式不正确\\\" \"</span> &gt;&gt; <span class=\"hljs-variable\">$Errlog</span>\r\n    <span class=\"hljs-built_in\">exit</span> 1;\r\n  <span class=\"hljs-keyword\">fi</span></code></pre><p><br></p>', '2016-10-27', null, 'shell', 'shell', '原创', 'taochengwei', 'false', 'false');
INSERT INTO `blog_article` VALUES ('91', 'SimpleRequests For Python', '           <p>           </p><p>           </p><p>Based on the built-in function httplib requests similar to the python module similar to the URL module of the simple type of request.</p><p>基于内置模块简易好用的REST风格请求模块。、</p><p>由于第一版代码过长，请移步<a href=\"https://gist.github.com/staugur/aeb4c5ffe9aebc0f7bae1d4eaea3d3ea\" target=\"_blank\">https://gist.github.com/staugur/aeb4c5ffe9aebc0f7bae1d4eaea3d3ea</a></p><p></p>\r\n        <p>或者是<a href=\"https://github.com/saintic/SimpleRequests\" target=\"_blank\" style=\"line-height: 1;\">https://github.com/saintic/SimpleRequests</a></p><p></p>\r\n        <p><br></p>', '2016-10-27', '2016-11-05 00:00:00', 'python', 'python', '原创', 'taochengwei', 'false', 'false');
INSERT INTO `blog_article` VALUES ('92', 'Flask使用点滴之访问前后', '           <p>           <p>flask app访问前后(即before_request、after_request)，可以做一些操作，此处举例访问前验证是否登录，访问后设置header、cookie等，记录访问日志。</p><pre style=\"max-width: 100%;\"><code class=\"python hljs\" codemark=\"1\"><span class=\"hljs-meta\">@app.before_request</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">before_request</span><span class=\"hljs-params\">()</span>:</span>\r\n    g.requestId = gen_requestId()\r\n    g.signin    = True\r\n    #此处应为判断是否已登录的逻辑\r\n    logger.info(<span class=\"hljs-string\">\"Start Once Access, this requestId is %s\"</span> %(g.requestId, ))\r\n\r\n<span class=\"hljs-meta\">@app.after_request</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">after_request</span><span class=\"hljs-params\">(response)</span>:</span>\r\n    response.headers[<span class=\"hljs-string\">\"X-SaintIC-Request-Id\"</span>] = g.requestId\r\n    response.set_cookie(key=\"after_request\", value=\"yes\")\r\n    logger.info(json.dumps({\r\n        <span class=\"hljs-string\">\"AccessLog\"</span>: {\r\n            <span class=\"hljs-string\">\"status_code\"</span>: response.status_code,\r\n            <span class=\"hljs-string\">\"method\"</span>: request.method,\r\n            <span class=\"hljs-string\">\"ip\"</span>: request.headers.get(<span class=\"hljs-string\">\'X-Real-Ip\'</span>, request.remote_addr),\r\n            <span class=\"hljs-string\">\"url\"</span>: request.url,\r\n            <span class=\"hljs-string\">\"referer\"</span>: request.headers.get(<span class=\"hljs-string\">\'Referer\'</span>),\r\n            <span class=\"hljs-string\">\"agent\"</span>: request.headers.get(<span class=\"hljs-string\">\"User-Agent\"</span>),\r\n            <span class=\"hljs-string\">\"requestId\"</span>: g.requestId,\r\n            }\r\n        }\r\n    ))\r\n    <span class=\"hljs-keyword\">return</span> response\r\n</code></pre><p><br></p></p>\r\n        ', '2016-10-27', '2016-11-26 00:00:00', 'flask python', 'flask', '原创', 'taochengwei', 'false', 'false');
INSERT INTO `blog_article` VALUES ('93', '服务存活性探测', '           <p>一个类似于telnet的python脚本。</p><pre style=\"max-width: 100%;\"><code class=\"python hljs\" codemark=\"1\"><span class=\"hljs-comment\">#!/usr/bin/python</span>\r\n<span class=\"hljs-comment\">#coding:utf-8</span>\r\n<span class=\"hljs-string\">\'\'\'\r\n1.判断服务是否正常\r\n2.判断机器是否存活\r\n\'\'\'</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> os,socket,subprocess,sys\r\n<span class=\"hljs-comment\">#把程序输出定位到/dev/null,否则会在程序运行时会在标准输出中显示命令的运行信息</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">servercheck</span><span class=\"hljs-params\">(ip)</span>:</span>\r\n    <span class=\"hljs-keyword\">with</span> open(os.devnull,<span class=\"hljs-string\">\'w\'</span>) <span class=\"hljs-keyword\">as</span> fnull:\r\n        result = subprocess.call(<span class=\"hljs-string\">\'ping \'</span>+ip+<span class=\"hljs-string\">\' -c 2\'</span>, shell = <span class=\"hljs-keyword\">True</span>, stdout = fnull, stderr = fnull)\r\n        <span class=\"hljs-keyword\">if</span> result != <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\'%s ping fail\'</span> % ip\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\'%s ping success\'</span> % ip\r\n    <span class=\"hljs-keyword\">return</span>\r\n\r\n<span class=\"hljs-comment\">#可用于检测程序是否正常，如检测服务和端口</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">servicecheck</span><span class=\"hljs-params\">(ip, port)</span>:</span>\r\n    sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n    sk.settimeout(<span class=\"hljs-number\">1</span>)\r\n    <span class=\"hljs-keyword\">try</span>:\r\n        sk.connect((ip,port))\r\n        <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\'%s %d service is UP!\'</span> %(ip,port)\r\n    <span class=\"hljs-keyword\">except</span> Exception:\r\n        <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\'%s %d service is DOWN!\'</span>  %(ip,port)\r\n        servercheck(ip)\r\n    <span class=\"hljs-keyword\">finally</span>:\r\n        sk.close()\r\n    <span class=\"hljs-keyword\">return</span>\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\'__main__\'</span>:\r\n    <span class=\"hljs-keyword\">if</span> len(sys.argv) == <span class=\"hljs-number\">3</span>:\r\n        ip=sys.argv[<span class=\"hljs-number\">1</span>]\r\n        port=sys.argv[<span class=\"hljs-number\">2</span>]\r\n        servicecheck(str(ip), int(port))\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"Usage:ip port\"</span>\r\n        sys.exit(<span class=\"hljs-number\">1</span>)</code></pre><p><br></p>', '2016-10-27', null, 'python', 'python', '原创', 'taochengwei', 'false', 'false');
INSERT INTO `blog_article` VALUES ('95', 'Squid+Stunnel 翻墙看世界', '           <p>加密代理功能的实现，越过封锁限制，访问被墙的国外站点，比如Google、FaceBook。</p><p>一、首先是国外的服务器安装squid和stunnel</p><p>1.安装Squid</p><pre style=\"max-width: 100%;\"><code class=\"bash hljs\" codemark=\"1\">yum -y install squid</code></pre><p>也不用修改配置，因为单单squid代理根本翻不了墙，所以需要一个加密的通道，stunnel，而stunnel只需要连接localhost的squid端口即可。</p><p>2.安装Stunnel</p><pre style=\"max-width: 100%;\"><code class=\"bash hljs\" codemark=\"1\">yum -y install stunnel openssl openssl-devel</code></pre><p>生成pem证书：</p><pre><code class=\"hljs bash\" codemark=\"1\"><span class=\"hljs-built_in\">cd</span> /etc/stunnel/\r\nopenssl req -new -x509 -days 365 -nodes -out stunnel.pem -keyout stunnel.pem\r\nopenssl gendh 512&gt;&gt; stunnel.pem <span class=\"hljs-comment\">#警告：这行不是必须的</span>\r\nuseradd <span class=\"hljs-_\">-s</span> /sbin/nologin -M stunnel\r\n</code></pre><p>修改/etc/stunnel/stunnel.conf(stunnel默认的配置文件)，复制以下内容：</p><pre><code class=\"hljs ini\" codemark=\"1\"><span class=\"hljs-attr\">cert</span> = /etc/stunnel/stunnel.pem\r\n<span class=\"hljs-attr\">CAfile</span> = /etc/stunnel/stunnel.pem\r\n<span class=\"hljs-attr\">socket</span> = l:TCP_NODELAY=<span class=\"hljs-number\">1</span>\r\n<span class=\"hljs-attr\">socket</span> = r:TCP_NODELAY=<span class=\"hljs-number\">1</span>\r\n\r\n<span class=\"hljs-comment\">;;;chroot = /var/run/stunnel</span>\r\n<span class=\"hljs-attr\">pid</span> = /tmp/stunnel.pid\r\n<span class=\"hljs-attr\">verify</span> = <span class=\"hljs-number\">3</span>\r\n\r\n<span class=\"hljs-comment\">;;; CApath = certs</span>\r\n<span class=\"hljs-comment\">;;; CRLpath = crls</span>\r\n<span class=\"hljs-comment\">;;; CRLfile = crls.pem</span>\r\n\r\n<span class=\"hljs-attr\">setuid</span> = stunnel\r\n<span class=\"hljs-attr\">setgid</span> = stunnel\r\n\r\n<span class=\"hljs-comment\">;;; client=yes</span>\r\n<span class=\"hljs-attr\">compression</span> = zlib\r\n<span class=\"hljs-comment\">;;; taskbar = no</span>\r\n<span class=\"hljs-attr\">delay</span> = <span class=\"hljs-literal\">no</span>\r\n<span class=\"hljs-comment\">;;; failover = rr</span>\r\n<span class=\"hljs-comment\">;;; failover = prio</span>\r\n<span class=\"hljs-attr\">sslVersion</span> = TLSv1\r\n<span class=\"hljs-comment\">;;; fips=no</span>\r\n\r\n<span class=\"hljs-attr\">debug</span> = <span class=\"hljs-number\">7</span>\r\n<span class=\"hljs-attr\">syslog</span> = <span class=\"hljs-literal\">no</span>\r\n<span class=\"hljs-attr\">output</span> = stunnel.log\r\n<span class=\"hljs-section\">\r\n[sproxy]</span>\r\n<span class=\"hljs-attr\">accept</span> = <span class=\"hljs-number\">34567</span>\r\n<span class=\"hljs-attr\">connect</span> = <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span>:<span class=\"hljs-number\">3128</span>\r\n</code></pre><p>accept = 34567 是 stunned要监听的端口号</p><p>connect = 127.0.0.1:3128 是Squid的监听地址和端口</p><p>在参考的原文中 fips=no 是未被注释的，但在我机器上此参数导致不能启动，所以我才注释掉，如遇到无法启动，可去掉注释。</p><p>3.启动squid和stunnel</p><pre><code class=\"hljs nginx\" codemark=\"1\"><span class=\"hljs-attribute\">service</span> squid start\r\nstunnel\r\n</code></pre><p>如果没有错误输出表示配置成功，并可以使用以下命令查看是否启动成功。</p><pre><code class=\"hljs perl\" codemark=\"1\">ps aux | <span class=\"hljs-keyword\">grep</span> -E <span class=\"hljs-string\">\"squid|stunnel\"</span>\r\nnetstat -an | <span class=\"hljs-keyword\">grep</span> “LISTEN” | <span class=\"hljs-keyword\">grep</span> -E <span class=\"hljs-string\">\"squid|stunnel\"</span>\r\n</code></pre><p>二、国内服务器：</p><p>只需要安装stunnel(yum -y install stunnel openssl-devel)，将国外服务器生成的stunnel.pem复制过来，唯一的不同在于配置文件中 sproxy那段，编辑stunnel.conf：</p><pre><code class=\"hljs ini\" codemark=\"1\"><span class=\"hljs-attr\">cert</span> = /etc/stunnel/stunnel.pem\r\n<span class=\"hljs-attr\">socket</span> = l:TCP_NODELAY=<span class=\"hljs-number\">1</span>\r\n<span class=\"hljs-attr\">socket</span> = r:TCP_NODELAY=<span class=\"hljs-number\">1</span>\r\n<span class=\"hljs-attr\">verify</span> = <span class=\"hljs-number\">2</span>\r\n<span class=\"hljs-attr\">CAfile</span> = /etc/stunnel/stunnel.pem\r\n<span class=\"hljs-attr\">client</span>=<span class=\"hljs-literal\">yes</span>\r\n<span class=\"hljs-attr\">compression</span> = zlib\r\n<span class=\"hljs-attr\">ciphers</span> = AES256-SHA\r\n<span class=\"hljs-attr\">delay</span> = <span class=\"hljs-literal\">no</span>\r\n<span class=\"hljs-attr\">failover</span> = prio\r\n<span class=\"hljs-attr\">sslVersion</span> = TLSv1\r\n<span class=\"hljs-comment\">;; fips = no</span>\r\n<span class=\"hljs-section\">[sproxy]</span>\r\n<span class=\"hljs-attr\">accept</span>  = <span class=\"hljs-number\">0.0</span>.<span class=\"hljs-number\">0.0</span>:<span class=\"hljs-number\">7071</span>\r\n<span class=\"hljs-attr\">connect</span> = 国外服务器IP:<span class=\"hljs-number\">34567</span>\r\n</code></pre><p>解释说明： accept = 0.0.0.0:7071 即是用户要设置的端口， connect = 国外服务器IP:34567 ，即国外服务器IP和Stunnel监听的端口号</p><p>启动stunnel</p><pre style=\"max-width: 100%;\"><code class=\"bash hljs\" codemark=\"1\">stunnel&nbsp;</code></pre><p>此时用户连接到国内服务器7071作为代理就可以访问一些被墙的网站。<br></p><p>在国内没有服务器，可以我在本地安装的一个Stunnel，用来加解密，所以没有国内服务也不要紧。</p><p><br></p><p></p><p>去stunnel官网下载一个windows版的客户端，将上面国内服务器的stunnel.conf配置文件和国外服务器stunnel.pem证书放到stunnel安装目录/config/下启动即可。</p><p><br></p>', '2016-10-27', null, 'squid stunnel 翻墙', 'linux', '原创', 'taochengwei', 'false', 'false');
INSERT INTO `blog_article` VALUES ('96', 'MySQL库重命名', '           <p>           <p>警告！！！</p><p>此重命名mysql库的脚本尚未测试完全，使用请谨慎！！！</p><pre style=\"max-width: 100%;\"><code class=\"bash hljs\" codemark=\"1\"><span class=\"hljs-meta\">#!/bin/bash</span>\r\n<span class=\"hljs-comment\">#获取库名，从库中获取表，导出表，创建新库，将表导入新库中！</span>\r\n<span class=\"hljs-comment\">#CONNECTION可以按情况修改</span>\r\n<span class=\"hljs-built_in\">read</span> -p <span class=\"hljs-string\">\"USER:\"</span> USER\r\n<span class=\"hljs-built_in\">read</span> <span class=\"hljs-_\">-s</span> -p <span class=\"hljs-string\">\"PASSWORD:\"</span> PASSWD\r\n<span class=\"hljs-built_in\">read</span> -p <span class=\"hljs-string\">\"HOST:\"</span> HOST\r\n<span class=\"hljs-built_in\">read</span> -p <span class=\"hljs-string\">\"PORT:\"</span> PORT\r\n<span class=\"hljs-built_in\">read</span> -p <span class=\"hljs-string\">\"NEW_NAME_PRE:\"</span> HJ\r\nCONNECTION=<span class=\"hljs-string\">\"-u <span class=\"hljs-variable\">${USER}</span> -p<span class=\"hljs-variable\">${PASSWD}</span> -h <span class=\"hljs-variable\">${HOST}</span> -P <span class=\"hljs-variable\">$PORT</span>\"</span>\r\n\r\n<span class=\"hljs-comment\">#Get data db</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-title\">GetDB</span></span>() {\r\nmysql <span class=\"hljs-variable\">$CONNECTION</span> <span class=\"hljs-_\">-e</span> <span class=\"hljs-string\">\"SHOW DATABASES;\"</span> &gt; db\r\nsed -i <span class=\"hljs-_\">-e</span> <span class=\"hljs-string\">\"/mysql/ d\"</span> <span class=\"hljs-_\">-e</span> <span class=\"hljs-string\">\"/information_schema/ d\"</span> <span class=\"hljs-_\">-e</span> <span class=\"hljs-string\">\"/Database/ d\"</span> <span class=\"hljs-_\">-e</span> <span class=\"hljs-string\">\"/performance_schema/ d\"</span> db\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-title\">ObTables</span></span>() {\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> `cat <span class=\"hljs-variable\">${DB}</span>_tables`\r\n    <span class=\"hljs-keyword\">do</span>\r\n        <span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$i</span>\"</span> != <span class=\"hljs-string\">\"\"</span> ]; <span class=\"hljs-keyword\">then</span>\r\n            mysqldump <span class=\"hljs-variable\">$CONNECTION</span> <span class=\"hljs-variable\">$DB</span> <span class=\"hljs-variable\">$i</span> &gt; <span class=\"hljs-variable\">${i}</span>.sql\r\n            <span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"$?\"</span> = <span class=\"hljs-string\">\"0\"</span> ]; <span class=\"hljs-keyword\">then</span>\r\n                mysql <span class=\"hljs-variable\">$CONNECTION</span> <span class=\"hljs-variable\">${HJ}</span>_<span class=\"hljs-variable\">${DB}</span> &lt; <span class=\"hljs-variable\">${i}</span>.sql\r\n            <span class=\"hljs-keyword\">fi</span>\r\n        <span class=\"hljs-keyword\">fi</span>\r\n    <span class=\"hljs-keyword\">done</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">#Get tables in someone db</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-title\">RENAME</span></span>() {\r\n<span class=\"hljs-keyword\">for</span> DB <span class=\"hljs-keyword\">in</span> `cat db`\r\n<span class=\"hljs-keyword\">do</span>\r\n    mkdir <span class=\"hljs-variable\">${DB}</span> ; <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">${DB}</span>\r\n    mysql <span class=\"hljs-variable\">$CONNECTION</span>  <span class=\"hljs-_\">-e</span> <span class=\"hljs-string\">\"USE <span class=\"hljs-variable\">$DB</span>;SHOW TABLES;\"</span> &gt; <span class=\"hljs-variable\">${DB}</span>_tables\r\n    sed -i <span class=\"hljs-string\">\'/Tables/ d\'</span> <span class=\"hljs-variable\">${DB}</span>_tables\r\n    mysql <span class=\"hljs-variable\">$CONNECTION</span> <span class=\"hljs-_\">-e</span> <span class=\"hljs-string\">\"CREATE DATABASE <span class=\"hljs-variable\">${HJ}</span>_<span class=\"hljs-variable\">${DB}</span>;\"</span>\r\n    ObTables\r\n    mysql <span class=\"hljs-variable\">$CONNECTION</span> <span class=\"hljs-_\">-e</span> <span class=\"hljs-string\">\"DROP DATABASE <span class=\"hljs-variable\">${DB}</span>;\"</span>\r\n    <span class=\"hljs-built_in\">cd</span> ..\r\n<span class=\"hljs-keyword\">done</span>\r\n}\r\n\r\nmkdir -p `date +%F`_db_rename ; <span class=\"hljs-built_in\">cd</span> `date +%F`_db_rename\r\nGetDB &amp;&amp; RENAME</code></pre><p><br></p></p>\r\n        ', '2016-10-27', '2016-11-05 00:00:00', 'MySQL', 'shell', '原创', 'taochengwei', 'false', 'false');
INSERT INTO `blog_article` VALUES ('97', 'Nginx日志切割脚本', '           <p>           <p>适用于以*.access.log开头的访问日志。</p><pre style=\"max-width: 100%;\"><code class=\"bash hljs\" codemark=\"1\"><span class=\"hljs-meta\">#!/bin/bash</span>\r\n<span class=\"hljs-comment\">#This script run at 00:00.</span>\r\nlogs_path=<span class=\"hljs-string\">\"/data/app/nginx/logs\"</span>\r\n<span class=\"hljs-comment\">#切分后log存放的目录</span>\r\nbak_path=<span class=\"hljs-string\">\"/data/logs\"</span>\r\n\r\nyesterday=$(date <span class=\"hljs-_\">-d</span> <span class=\"hljs-string\">\"yesterday\"</span> +<span class=\"hljs-string\">\"%Y%m%d\"</span>)\r\nnginx_pid=$(cat <span class=\"hljs-variable\">${logs_path}</span>/nginx.pid)\r\nhost=$(ls <span class=\"hljs-_\">-l</span> <span class=\"hljs-variable\">${logs_path}</span>/*.access.log | awk -F <span class=\"hljs-string\">\" \"</span> <span class=\"hljs-string\">\'{print $9}\'</span> | awk -F <span class=\"hljs-string\">\".access\"</span> <span class=\"hljs-string\">\'{print $1}\'</span> | awk -F <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$logs_path</span>/\"</span> <span class=\"hljs-string\">\'{print $2}\'</span>)\r\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable\">$host</span>\r\n<span class=\"hljs-keyword\">do</span>\r\n  program=<span class=\"hljs-variable\">${bak_path}</span>/<span class=\"hljs-variable\">$i</span>\r\n  bakfile=<span class=\"hljs-variable\">${program}</span>/<span class=\"hljs-variable\">${yesterday}</span>.tgz\r\n  [ <span class=\"hljs-_\">-d</span> <span class=\"hljs-variable\">$program</span> ] || mkdir -p <span class=\"hljs-variable\">$program</span>\r\n  <span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-_\">-f</span> <span class=\"hljs-variable\">$bakfile</span> ];<span class=\"hljs-keyword\">then</span>\r\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"已存在备份文件\"</span>;<span class=\"hljs-built_in\">exit</span> 1\r\n  <span class=\"hljs-keyword\">else</span>\r\n    mv <span class=\"hljs-variable\">${logs_path}</span>/<span class=\"hljs-variable\">${i}</span>.access.log <span class=\"hljs-variable\">$program</span>;\r\n    <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$program</span> ; tar zcf <span class=\"hljs-variable\">$bakfile</span> <span class=\"hljs-variable\">${i}</span>.access.log --remove\r\n  <span class=\"hljs-keyword\">fi</span>\r\n<span class=\"hljs-keyword\">done</span>\r\n[ <span class=\"hljs-_\">-d</span> <span class=\"hljs-variable\">${bak_path}</span>/all ] || mkdir -p <span class=\"hljs-variable\">${bak_path}</span>/all\r\n<span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">${bak_path}</span>/all\r\nmv <span class=\"hljs-variable\">${logs_path}</span>/access.log . &amp;&amp; tar zcf <span class=\"hljs-variable\">${yesterday}</span>.access.tgz access.log --remove\r\nmv <span class=\"hljs-variable\">${logs_path}</span>/error.log . &amp;&amp; tar zcf <span class=\"hljs-variable\">${yesterday}</span>.error.tar.gz error.log --remove\r\n\r\n<span class=\"hljs-comment\">#向nginx主进程发信号重新打开日志</span>\r\n<span class=\"hljs-built_in\">kill</span> -USR1 <span class=\"hljs-variable\">$nginx_pid</span></code></pre><p><br></p></p>\r\n        ', '2016-10-27', '2016-11-05 00:00:00', 'nginx', 'nginx', '原创', 'taochengwei', 'false', 'false');
INSERT INTO `blog_article` VALUES ('98', 'OpenVPN', '           <p><b>1.环境：</b></p><p>一台H3C路由器接入外网，有公网IP，内网一台linux(CentOS7.0)做OpenVPN服务器，路由器配了静态NAT。（如果IP紧张，也可以做端口映射。）</p><p><b>2.目标：</b></p><p>证书认证的内网OpenVPN。</p><p><b>3.步骤：</b></p><p><i>OpenVPN服务器：</i></p><p>1.CentOS7采用了最新的firewalld机制替代了iptables(默认iptables服务未安装)，为了方便使用一下命令直接关掉。</p><p>systemctl stop firewalld</p><p>systemctl disable firewalld</p><p>systemctl stop iptables(CentOS7默认没启用iptables) 所需软件(软件后续更新链接)：</p><p><a href=\"https://saintic.top/software/download/openvpn-2.1_rc21.tar.gz\" target=\"_blank\">https://saintic.top/software/download/openvpn-2.1_rc21.tar.gz</a></p><p><a href=\"https://saintic.top/software/download/openvpn-2.1_rc21_eurephia.patch\" target=\"_blank\">https://saintic.top/software/download/openvpn-2.1_rc21_eurephia.patch</a></p><p><a href=\"https://saintic.top/software/rpms/pkcs11-helper-1.11-4.fc22.x86_64.rpm\" target=\"_blank\">https://saintic.top/software/rpms/pkcs11-helper-1.11-4.fc22.x86_64.rpm</a></p><p><a href=\"https://saintic.top/software//rpms/pkcs11-helper-devel-1.11-4.fc22.x86_64.rpm\" target=\"_blank\">https://saintic.top/software//rpms/pkcs11-helper-devel-1.11-4.fc22.x86_64.rpm</a></p><p>2.安装软件生成证书</p><p>yum –y install pam-devel openssl-devel lzo-devel automake gcc gcc-c++ patch</p><p>rpm –ivh pkcs11-helper-*</p><p>过程：（先同步时间！ntpdate ntp.pool.org）</p><p>tar zxf openvpn-2.1_rc19.tar.gz ; cd openvpn-2.1_rc19</p><p>patch -p1 &lt; ../openvpn-2.1_rc21_eurephia.patch</p><p>./configure &&amp; make &amp;&amp; make install</p><p>cd easy-rsa/2.0/</p><p>vim vars ; source ./vars ##修改默认国家、组织、邮件等，可不修改</p><p>./clean-all</p><p>./build-ca ##创建根证书</p><p>./build-key-server server ##创建服务器证书</p><p>./build-dh ##使用DH加密</p><p>./build-ket client ##创建客户端证书</p><p>cd keys</p><p>mkdir /etc/openvpn</p><p>cp ca.crt ca.key dh1024.pem server.key server.crt client.* ../../../sample-config-files/server.conf /etc/openvpn</p><p>cp ../../../sample-scripts/openvpn.init /etc/init.d/openvpn</p><p>chkconfig –add openvpn</p><p>chkconfig openvpn on</p><p>3.修改配置文件/etc/openvpn/server.conf</p><pre style=\"max-width: 100%;\"><code class=\"bash hljs\" codemark=\"1\">;<span class=\"hljs-built_in\">local</span>\r\n\r\nport 1194\r\n\r\nproto udp\r\n\r\ndev tun\r\n\r\nca ca.crt\r\n\r\ncert server.crt\r\n\r\nkey server.key\r\n\r\ndh dh1024.pem\r\n\r\nserver 192.168.234.0 255.255.255.0\r\n\r\nifconfig-pool-persist ipp.txt\r\n\r\npush “route 192.168.1.0 255.255.255.0” <span class=\"hljs-comment\">##向客户端推送内网网段</span>\r\n\r\npush “route 192.168.234.0 255.255.255.0” <span class=\"hljs-comment\">##推送VPN网段</span>\r\n\r\npush “dhcp-option DNS 192.168.1.153” <span class=\"hljs-comment\">##推送首选DNS，可以多个</span>\r\n\r\npush “dhcp-option DNS 114.114.114.114”\r\n\r\nclient-to-client <span class=\"hljs-comment\">##允许OpenVPN客户端之间通信</span>\r\n\r\nduplicate-cn\r\n\r\nkeepalive 10 120\r\n\r\ncomp-lzo\r\n\r\nuser nobody <span class=\"hljs-comment\">##默认的程序用户，建议以低权限账户运行</span>\r\n\r\ngroup nobody\r\n\r\npersist-key\r\n\r\npersist-tun\r\n\r\nstatus openvpn-status.log\r\n\r\n<span class=\"hljs-built_in\">log</span> openvpn.log\r\n\r\nverb 3</code></pre><p>4.开启转发，并关闭防火墙和 SELinux</p><p>vim /etc/sysctl.conf #修改net.ipv4.ip_forward = 0</p><pre><code class=\"hljs\" codemark=\"1\">net.ipv4.ip_forward = 1\r\n</code></pre><p>sysctl -p ##让sysctl.conf生效</p><p>vim /etc/sysconfig/selinux</p><pre><code class=\"hljs ini\" codemark=\"1\"><span class=\"hljs-attr\">SELINUX</span>=disabled\r\n</code></pre><p>reboot #修改了SELinux需要reboot，临时禁用SELinux使用setenforce 0</p><p>5.H3C路由器：</p><p>添加一条VPN内网路由，下一跳指向OpenVPN服务器！</p><p>客户端配置：</p><p>win7 win8安装<a href=\"https://saintic.top/software/download/openvpn-install-2.3.6-I601-x86_64.exe\" target=\"_blank\">https://saintic.top/software/download/openvpn-install-2.3.6-I601-x86_64.exe</a></p><p>winxp安装<a href=\"https://saintic.top/software/download/openvpn-2.0.9-gui-1.0.3-install-FOR_-XP.exe\" target=\"_blank\">https://saintic.top/software/download/openvpn-2.0.9-gui-1.0.3-install-FOR_-XP.exe</a></p><p>将./build-ket client这一步产生的client.crt client.ket ca.crt复制到客户端安装目录下的config/</p><p>将安装目录下的sample-config/client.ovpn复制到config/下，修改其中的remote VPN-SERVER-IP Port，即remote OpenVPN服务器IP 端口(默认是1194)</p><p>然后以管理员身份启动OpenVPN GUI，避免无法创建路由问题。</p><p><br></p><p><font color=\"#ff0000\">附录一个一键部署openvpn的脚本:</font></p><p><a href=\"https://github.com/staugur/scripts/blob/master/services/openvpn.sh\" target=\"_blank\">https://github.com/staugur/scripts/blob/master/services/openvpn.sh</a></p><p><br></p>', '2016-11-01', null, 'OpenVPN', 'linux', '原创', 'taochengwei', 'false', 'false');
INSERT INTO `blog_article` VALUES ('100', 'puppet安装脚本', '           <pre style=\"max-width: 100%;\"><code class=\"bash hljs\" codemark=\"1\"><span class=\"hljs-meta\">#!/bin/bash</span>\r\n<span class=\"hljs-comment\">#@Author:www.saintic.com</span>\r\n<span class=\"hljs-comment\">#@Description:Install puppet master or agent</span>\r\n\r\nclear\r\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-_\">-e</span> -n <span class=\"hljs-string\">\"\\033[32m请输入1安装puppet master,输入2安装puppet client如果出现error.log文件,请注意查看.\\033[0m\"</span>\r\n<span class=\"hljs-built_in\">read</span> CODE_NUM\r\n\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">HEAD</span></span>() {\r\n    <span class=\"hljs-keyword\">if</span> [ $(id -u) != <span class=\"hljs-string\">\"0\"</span> ]; <span class=\"hljs-keyword\">then</span>\r\n        <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Error:请确保以root用户执行此脚本！\"</span>\r\n        <span class=\"hljs-built_in\">exit</span> 1\r\n    <span class=\"hljs-keyword\">fi</span>\r\n    SESTATE=$(sestatus | wc <span class=\"hljs-_\">-l</span>)\r\n    <span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$SESTATE</span>\"</span> != <span class=\"hljs-string\">\"1\"</span> ]; <span class=\"hljs-keyword\">then</span>\r\n        sed -i <span class=\"hljs-string\">\'s/SELINUX=enforcing/SELINUX=disabled/g\'</span> /etc/selinux/config\r\n        sed -i <span class=\"hljs-string\">\'s/SELINUX=permissive/SELINUX=disabled/g\'</span> /etc/selinux/config &amp;&gt; /dev/null\r\n    <span class=\"hljs-keyword\">fi</span>\r\n}\r\n\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">error</span></span>() {\r\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Error:Please check this script and input/output!\"</span>\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-title\">iAGENT</span></span>() {\r\n    yum install -y puppet facter openssl-devel  2&gt;&gt; error.log\r\n    chkconfig puppet on\r\n}\r\n<span class=\"hljs-function\"><span class=\"hljs-title\">iMASTER</span></span>() {\r\n    yum install -y puppet puppet-server facter openssl-devel  2&gt;&gt; error.log\r\n    chkconfig puppetmaster on\r\n}\r\n<span class=\"hljs-function\"><span class=\"hljs-title\">startINSTALL</span></span>() {\r\n    <span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$CODE_NUM</span>\"</span> = <span class=\"hljs-string\">\"1\"</span> ]; <span class=\"hljs-keyword\">then</span>\r\n        iMASTER\r\n        iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 8140 -j ACCEPT\r\n    <span class=\"hljs-keyword\">else</span>\r\n        iAGENT\r\n        iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 8139 -j ACCEPT\r\n    <span class=\"hljs-keyword\">fi</span>\r\n}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-title\">infoVERSION</span></span>() {\r\ngrep <span class=\"hljs-string\">\"5\"</span> /etc/redhat-release &amp;&gt; /dev/null &amp;&amp; <span class=\"hljs-built_in\">echo</span> $? &gt; v5\r\ngrep <span class=\"hljs-string\">\"6\"</span> /etc/redhat-release &amp;&gt; /dev/null &amp;&amp; <span class=\"hljs-built_in\">echo</span> $? &gt; v6\r\ngrep <span class=\"hljs-string\">\"7\"</span> /etc/redhat-release &amp;&gt; /dev/null &amp;&amp; <span class=\"hljs-built_in\">echo</span> $? &gt; v7\r\n<span class=\"hljs-keyword\">if</span> [ `cat v5` = <span class=\"hljs-string\">\"0\"</span> ]; <span class=\"hljs-keyword\">then</span>\r\n    rpm -ivh http://yum.puppetlabs.com/puppetlabs-release-el-5.noarch.rpm\r\n    startINSTALL\r\n    service iptables save\r\n<span class=\"hljs-keyword\">fi</span>\r\n<span class=\"hljs-keyword\">if</span> [ `cat v6` = <span class=\"hljs-string\">\"0\"</span> ]; <span class=\"hljs-keyword\">then</span>\r\n    rpm -ivh http://yum.puppetlabs.com/puppetlabs-release-el-6.noarch.rpm\r\n    startINSTALL\r\n    service iptables save\r\n<span class=\"hljs-keyword\">fi</span>\r\n<span class=\"hljs-keyword\">if</span> [ `cat v7` = <span class=\"hljs-string\">\"0\"</span> ]; <span class=\"hljs-keyword\">then</span>\r\n    rpm -ivh http://yum.puppetlabs.com/puppetlabs-release-el-7.noarch.rpm\r\n    startINSTALL\r\n    <span class=\"hljs-comment\">#firewall-cmd --permanent --zone=public --add-port=8140/tcp</span>\r\n    <span class=\"hljs-comment\">#firewall-cmd --reload</span>\r\n    systemctl stop firewalld ; systemctl <span class=\"hljs-built_in\">disable</span> firewalld\r\n<span class=\"hljs-keyword\">fi</span>\r\nrm <span class=\"hljs-_\">-f</span> v5 v6 v7 &amp;&gt; /dev/null\r\n}\r\n\r\nHEAD &amp;&amp; infoVERSION || <span class=\"hljs-built_in\">exit</span> 1</code></pre><p><br></p>', '2016-11-01', null, 'puppet', 'linux', '原创', 'taochengwei', 'false', 'false');
INSERT INTO `blog_article` VALUES ('101', '固定目录中文件数量的脚本', '           <p>适用场景：发布的备份目录，只保留部分版本，无需旧版本，此时可用这个脚本，前提是旧版本文件没有修改，其modift time=create time。</p><pre style=\"max-width: 100%;\"><code class=\"bash hljs\" codemark=\"1\"><span class=\"hljs-meta\">#!/bin/bash</span>\r\n<span class=\"hljs-comment\">#要求：旧项目(文件)不被写入，否则其Modify Time会更改，脚本执行就不对了！</span>\r\n<span class=\"hljs-comment\">#根据Modify时间将旧项目删除并邮件通知.</span>\r\nObDIR=/root/program\r\nFixNUM=3\r\nCurNUM=`<span class=\"hljs-built_in\">stat</span> -c <span class=\"hljs-string\">\"%n\"</span> <span class=\"hljs-variable\">${ObDIR}</span>/* | wc <span class=\"hljs-_\">-l</span>`\r\nHeadNUM=`expr <span class=\"hljs-variable\">$CurNUM</span> - <span class=\"hljs-variable\">$FixNUM</span>`\r\n\r\n<span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-variable\">$CurNUM</span> <span class=\"hljs-_\">-gt</span> <span class=\"hljs-variable\">$FixNUM</span> ]; <span class=\"hljs-keyword\">then</span>\r\n    <span class=\"hljs-built_in\">stat</span> -c <span class=\"hljs-string\">\"%X %n\"</span> <span class=\"hljs-variable\">${ObDIR}</span>/* | sort -n | head -n <span class=\"hljs-variable\">$HeadNUM</span> |  awk <span class=\"hljs-string\">\'{print $2}\'</span> &gt; /tmp/Old_LIST\r\n<span class=\"hljs-keyword\">fi</span>\r\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> `cat /tmp/Old_LIST`\r\n<span class=\"hljs-keyword\">do</span>\r\n    rm <span class=\"hljs-_\">-f</span> <span class=\"hljs-variable\">$i</span>\r\n<span class=\"hljs-keyword\">done</span>\r\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"以上是本次删除的内容!\"</span> &gt;&gt; /tmp/Old_LIST\r\ncat /tmp/Old_LIST | mailx <span class=\"hljs-_\">-s</span> <span class=\"hljs-string\">\"Report:Program\"</span>  -r backup@saintic.com staugur@saintic.com</code></pre><p><br></p>', '2016-11-01', null, 'shell', 'shell', '原创', 'taochengwei', 'false', 'false');
INSERT INTO `blog_article` VALUES ('102', 'vsftpd服务与虚拟用户创建脚本', '           <p>&nbsp; &nbsp; 第一个脚本保存为vsftpd.sh，赋予x权限，或者sh vsftpd.sh user passwd执行，会根据系统(仅支持CentOS5,6,7,建议为6)配置虚拟用户登录ftp环境； 第二个脚本为创建虚拟用户函数，请往下看。</p><pre style=\"max-width: 100%;\"><code class=\"bash hljs\" codemark=\"1\"><span class=\"hljs-meta\">#!/bin/bash</span>\r\n<span class=\"hljs-comment\">#Create virtual ftp users, first user is test</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-title\">error</span></span>() {\r\n  <span class=\"hljs-built_in\">exit</span> 1\r\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Error,args is 2\"</span>\r\n}\r\n[ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$#</span>\"</span> = <span class=\"hljs-string\">\"2\"</span> ] || error\r\nvfu=/etc/vsftpd/vfu.list\r\nvfudb=/etc/vsftpd/vfu.db\r\nvfudir=/etc/vsftpd/vfu_dir\r\nuser=<span class=\"hljs-variable\">$1</span>\r\npasswd=<span class=\"hljs-variable\">$2</span>\r\n\r\nyum -y install vsftpd ftp\r\n[ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$SYS_VERSION</span>\"</span> == <span class=\"hljs-string\">\"5\"</span> ] &amp;&amp; yum -y install db4-utils\r\n[ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$SYS_VERSION</span>\"</span> == <span class=\"hljs-string\">\"6\"</span> ] &amp;&amp; yum -y install db4-utils\r\n[ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$SYS_VERSION</span>\"</span> == <span class=\"hljs-string\">\"7\"</span> ] &amp;&amp; yum -y install libdb-utils\r\ncat &gt;&gt; <span class=\"hljs-variable\">$vfu</span> &lt;&lt;EOF\r\n<span class=\"hljs-variable\">$user</span>\r\n<span class=\"hljs-variable\">$passwd</span>\r\nEOF\r\ndb_load -T -t <span class=\"hljs-built_in\">hash</span> <span class=\"hljs-_\">-f</span> <span class=\"hljs-variable\">$vfu</span> <span class=\"hljs-variable\">$vfudb</span>\r\nchmod 600 <span class=\"hljs-variable\">$vfu</span> <span class=\"hljs-variable\">$vfudb</span>\r\n\r\ncat &gt; /etc/pam.d/vsftpd.vu &lt;&lt;EOF\r\n<span class=\"hljs-comment\">#%PAM-1.0</span>\r\nauth   required     pam_userdb.so  db=/etc/vsftpd/vfu\r\naccount required    pam_userdb.so  db=/etc/vsftpd/vfu\r\nEOF\r\n\r\nmv /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.bak\r\ncat &gt; /etc/vsftpd/vsftpd.conf&lt;&lt;EOF\r\nftpd_banner=SDI CodeSourceRoot.\r\nanonymous_<span class=\"hljs-built_in\">enable</span>=NO\r\n<span class=\"hljs-built_in\">local</span>_<span class=\"hljs-built_in\">enable</span>=YES\r\nwrite_<span class=\"hljs-built_in\">enable</span>=YES\r\n<span class=\"hljs-built_in\">local</span>_<span class=\"hljs-built_in\">umask</span>=022\r\nxferlog_<span class=\"hljs-built_in\">enable</span>=YES\r\nxferlog_std_format=YES\r\nxferlog_file=/var/<span class=\"hljs-built_in\">log</span>/vsftpd.log\r\nuserlist_<span class=\"hljs-built_in\">enable</span>=YES\r\nuserlist_deny=YES\r\nlisten=YES\r\nlisten_ipv6=NO\r\nmax_per_ip=5\r\ntcp_wrappers=YES\r\npam_service_name=vsftpd.vu\r\nvirtual_use_<span class=\"hljs-built_in\">local</span>_privs=YES\r\nguest_<span class=\"hljs-built_in\">enable</span>=YES\r\nguest_username=ftp\r\nuser_config_dir=<span class=\"hljs-variable\">$vfudir</span>\r\nchroot_list_<span class=\"hljs-built_in\">enable</span>=YES\r\nchroot_list_file=/etc/vsftpd/chroot_list\r\nchroot_<span class=\"hljs-built_in\">local</span>_user=YES\r\n<span class=\"hljs-built_in\">local</span>_root=/var/ftp/\r\nEOF\r\n<span class=\"hljs-comment\">#chroot_list:open user</span>\r\n<span class=\"hljs-comment\">#chown -R ftp.ftp /var/ftp</span>\r\n<span class=\"hljs-comment\">#chmod -R a+t /vat/ftp/</span>\r\ntouch /etc/vsftpd/chroot_list\r\nmkdir -p <span class=\"hljs-variable\">$vfudir</span> ; <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$vfudir</span>\r\ncat &gt; <span class=\"hljs-variable\">$user</span> &lt;&lt;EOF\r\nwrite_<span class=\"hljs-built_in\">enable</span>=YES\r\nanon_world_readable_only=NO\r\nanon_upload_<span class=\"hljs-built_in\">enable</span>=YES\r\nanon_mkdir_write_<span class=\"hljs-built_in\">enable</span>=YES\r\nanon_other_write_<span class=\"hljs-built_in\">enable</span>=YES\r\n<span class=\"hljs-built_in\">local</span>_root=/var/ftp/\r\nEOF\r\n/etc/init.d/vsftpd restart\r\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Ending,Succeed!!!\"</span>\r\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Please check iptables or firewalld, SELinux.\"</span></code></pre><p><br></p><p>&nbsp; &nbsp; 第二个脚本保存为create_ftp.sh，需要传递三个参数，user、password、home，会自动创建虚拟用户可直接登录 home(自定义user的根目录)。</p><pre style=\"max-width: 100%;\"><code class=\"bash hljs\" codemark=\"1\"><span class=\"hljs-comment\">#/bin/bash</span>\r\n<span class=\"hljs-comment\">#create virtual ftp user.</span>\r\n[ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$#</span>\"</span> != <span class=\"hljs-string\">\"3\"</span> ] &amp;&amp; ERROR\r\n<span class=\"hljs-comment\">#arg:$init_user $init_passwd $init_user_home_root</span>\r\nvfu=/etc/vsftpd/vfu.list\r\nvfudb=/etc/vsftpd/vfu.db\r\nvfudir=/etc/vsftpd/vfu_dir\r\ncat &gt;&gt; <span class=\"hljs-variable\">$vfu</span> &lt;&lt;EOF\r\n<span class=\"hljs-variable\">$1</span>\r\n<span class=\"hljs-variable\">$2</span>\r\nEOF\r\ndb_load -T -t <span class=\"hljs-built_in\">hash</span> <span class=\"hljs-_\">-f</span> <span class=\"hljs-variable\">$vfu</span> <span class=\"hljs-variable\">$vfudb</span>\r\ncat &gt; <span class=\"hljs-variable\">${vfudir}</span>/<span class=\"hljs-variable\">$1</span> &lt;&lt;EOF\r\nwrite_<span class=\"hljs-built_in\">enable</span>=YES\r\nanon_world_readable_only=NO\r\nanon_upload_<span class=\"hljs-built_in\">enable</span>=YES\r\nanon_mkdir_write_<span class=\"hljs-built_in\">enable</span>=YES\r\nanon_other_write_<span class=\"hljs-built_in\">enable</span>=YES\r\n<span class=\"hljs-built_in\">local</span>_root=<span class=\"hljs-variable\">$3</span>\r\nEOF\r\nchown -R ftp.ftp <span class=\"hljs-variable\">$3</span>\r\nchmod -R a+t <span class=\"hljs-variable\">$3</span>\r\n/etc/init.d/vsftpd reload</code></pre><p><br></p><p><br></p><p><br></p>', '2016-11-01', null, 'vsftpd', 'linux', '原创', 'taochengwei', 'false', 'false');
INSERT INTO `blog_article` VALUES ('103', 'RTBAsia真人概率值查询接口', '           <p><b>RTBAsia真人概率值说明：</b></p><ul><li>知识背景：互联网用户分为三个最大的“人群”：男，女，机器人；机器人会模仿人类的形态浏览网页、观赏视频、点击广告、撰写评论、投票点赞。机器人通常居住在“数据中心”。</li><li>当IP场景为“数据中心”时，此IP发出的网页浏览行为大多数情况下属于NHT（Non Human Traffic，非人类的访问），可能是各种功能的机器人：搜索爬虫、内容采集器、舆情监控、网站性能监控、压力测试器、自动发帖机、安全检测软件等等，你懂的...</li><li>“真人概率”的数值在50%以上，可以被认定为此IP的网页访问量基本由人类主动行为产生，分值愈高越真实。低于50%则有较高可能性是此IP的行为是机器人主导。<br></li></ul><p>RTBAsia官方网址：<a href=\"https://www.rtbasia.com/\" target=\"_blank\">https://www.rtbasia.com/</a></p><p>RTBAsia测试网址：<a href=\"https://ip.rtbasia.com/\" target=\"_blank\">https://ip.rtbasia.com/</a></p><p><b>接口说明：</b></p><p><ul><li>操作接口是RTBAsia开放在百度APIStore的免费API，apikey缓存你在百度APIStore自己的key，要求安装requests库，命令是pip install requests。<br></li><li>使用方法是，携带一个file参数，读取file内容，每一行一个IP。</li></ul></p><pre style=\"max-width: 100%;\"><code class=\"python hljs\" codemark=\"1\"><span class=\"hljs-comment\"># -*- coding: utf-8 -*-</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> requests\r\n\r\napikey = <span class=\"hljs-string\">\'Your Baidu Apistore apikey\'</span>\r\nurl = <span class=\"hljs-string\">\'http://apis.baidu.com/rtbasia/non_human_traffic_screening_vp/nht_query\'</span>\r\nV={}\r\nheaders={<span class=\"hljs-string\">\'apikey\'</span>: apikey}\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">GetValue</span><span class=\"hljs-params\">(ip)</span>:</span>\r\n    <span class=\"hljs-keyword\">global</span> V\r\n    r=requests.get(url, params={<span class=\"hljs-string\">\'ip\'</span>: ip}, headers=headers).json()\r\n    state = r.get(<span class=\"hljs-string\">\'code\'</span>)\r\n    ip    = r.get(<span class=\"hljs-string\">\'ip\'</span>)\r\n    score = int(r.get(<span class=\"hljs-string\">\'data\'</span>).get(<span class=\"hljs-string\">\'score\'</span>))\r\n    <span class=\"hljs-keyword\">if</span> score &lt; <span class=\"hljs-number\">50</span>: V[ip] = score\r\n    <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-string\">\'state\'</span>:state, <span class=\"hljs-string\">\'ip\'</span>:ip, <span class=\"hljs-string\">\'score\'</span>: score}\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\'__main__\'</span>:\r\n    <span class=\"hljs-keyword\">import</span> sys\r\n    <span class=\"hljs-keyword\">try</span>:\r\n        ipfile=sys.argv[<span class=\"hljs-number\">1</span>]\r\n    <span class=\"hljs-keyword\">except</span> IndexError:\r\n        ipfile=<span class=\"hljs-string\">\'test.txt\'</span>\r\n    <span class=\"hljs-keyword\">with</span> open(ipfile, <span class=\"hljs-string\">\'r\'</span>) <span class=\"hljs-keyword\">as</span> f:\r\n        ips=f.readlines()\r\n    <span class=\"hljs-keyword\">for</span> ip <span class=\"hljs-keyword\">in</span> ips:\r\n        <span class=\"hljs-keyword\">print</span> GetValue(ip.strip())\r\n    <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"真人概率值低语50%的有以下IP:\\n\"</span>, V</code></pre><p>此脚本存放在GITHUB中，链接是：<a href=\"https://github.com/staugur/scripts/blob/master/services/RTBAsiaAPI.py\" target=\"_blank\">https://github.com/staugur/scripts/blob/master/services/RTBAsiaAPI.py</a></p><p><br></p>', '2016-11-01', '2016-12-14', 'python', 'python', '原创', 'taochengwei', 'true', 'true');
INSERT INTO `blog_article` VALUES ('104', 'ParseConfig2sedcmd.py', '           <p>这是一个将配置文件变成sed的python脚本。</p><p>由于是工作中写的临时用的，并不能确保万无一失，要求配置文件的格式类似以下(java配置文件)：</p><pre style=\"max-width: 100%;\"><code class=\"ini hljs\" codemark=\"1\"><span class=\"hljs-comment\"># log4j config</span>\r\nlog4j.rootLogger=info,logfile\r\n\r\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\r\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.stdout.layout.ConversionPattern=<span class=\"hljs-section\">[%-5p]</span>%-d{HH:mm:ss} <span class=\"hljs-section\">[%c{1}]</span> %X{ip}-%X{sid} %m%n\r\n\r\nlog4j.appender.logfile=org.apache.log4j.DailyRollingFileAppender\r\nlog4j.appender.logfile.File=/home/dsp/app/mobile_monitora/logs/monitor.log\r\nlog4j.appender.logfile.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.logfile.layout.ConversionPattern=<span class=\"hljs-section\">[%-5p]</span>%-d{yyyy-MM-dd HH:mm:ss} <span class=\"hljs-section\">[%c]</span> %X{ip}-%X{sid} %m%n\r\n\r\nlog4j.logger.org.springframework=ERROR\r\nlog4j.logger.org.springframework.jdbc.core.simple.SimpleJdbcTemplate=ERROR\r\nlog4j.logger.java.sql.Connection=ERROR\r\nlog4j.logger.java.sql.Statement=ERROR\r\nlog4j.logger.java.sql.PreparedStatement=ERROR\r\nlog4j.logger.java.sql.ResultSet=ERROR\r\nlog4j.logger.com.opensymphony.xwork2=ERROR\r\n</code></pre><p>最终生成效果类似于：</p><pre style=\"max-width: 100%;\"><code class=\"bash hljs\" codemark=\"1\"><span class=\"hljs-comment\">#************************************************** log4j.properties **************************************************</span>\r\n<span class=\"hljs-comment\">#hz b</span>\r\nsed -i <span class=\"hljs-string\">\'s#log4j.rootLogger=.*#log4j.rootLogger=info,logfile#g\'</span> <span class=\"hljs-built_in\">log</span>4j.properties\r\nsed -i <span class=\"hljs-string\">\'s#log4j.appender.stdout=.*#log4j.appender.stdout=org.apache.log4j.ConsoleAppender#g\'</span> <span class=\"hljs-built_in\">log</span>4j.properties\r\nsed -i <span class=\"hljs-string\">\'s#log4j.appender.stdout.layout=.*#log4j.appender.stdout.layout=org.apache.log4j.PatternLayout#g\'</span> <span class=\"hljs-built_in\">log</span>4j.properties\r\nsed -i <span class=\"hljs-string\">\'s#log4j.appender.stdout.layout.ConversionPattern=.*#log4j.appender.stdout.layout.ConversionPattern=[%-5p]%-d{HH:mm:ss} [%c{1}] %X{ip}-%X{sid} %m%n#g\'</span> <span class=\"hljs-built_in\">log</span>4j.properties\r\nsed -i <span class=\"hljs-string\">\'s#log4j.appender.logfile=.*#log4j.appender.logfile=org.apache.log4j.DailyRollingFileAppender#g\'</span> <span class=\"hljs-built_in\">log</span>4j.properties\r\nsed -i <span class=\"hljs-string\">\'s#log4j.appender.logfile.File=.*#log4j.appender.logfile.File=/home/dsp/app/mobile_monitorb/logs/monitor.log#g\'</span> <span class=\"hljs-built_in\">log</span>4j.properties\r\nsed -i <span class=\"hljs-string\">\'s#log4j.appender.logfile.layout=.*#log4j.appender.logfile.layout=org.apache.log4j.PatternLayout#g\'</span> <span class=\"hljs-built_in\">log</span>4j.properties\r\nsed -i <span class=\"hljs-string\">\'s#log4j.appender.logfile.layout.ConversionPattern=.*#log4j.appender.logfile.layout.ConversionPattern=[%-5p]%-d{yyyy-MM-dd HH:mm:ss} [%c] %X{ip}-%X{sid} %m%n#g\'</span> <span class=\"hljs-built_in\">log</span>4j.properties\r\nsed -i <span class=\"hljs-string\">\'s#log4j.logger.org.springframework=.*#log4j.logger.org.springframework=ERROR#g\'</span> <span class=\"hljs-built_in\">log</span>4j.properties\r\nsed -i <span class=\"hljs-string\">\'s#log4j.logger.org.springframework.jdbc.core.simple.SimpleJdbcTemplate=.*#log4j.logger.org.springframework.jdbc.core.simple.SimpleJdbcTemplate=ERROR#g\'</span> <span class=\"hljs-built_in\">log</span>4j.properties\r\nsed -i <span class=\"hljs-string\">\'s#log4j.logger.java.sql.Connection=.*#log4j.logger.java.sql.Connection=ERROR#g\'</span> <span class=\"hljs-built_in\">log</span>4j.properties\r\nsed -i <span class=\"hljs-string\">\'s#log4j.logger.java.sql.Statement=.*#log4j.logger.java.sql.Statement=ERROR#g\'</span> <span class=\"hljs-built_in\">log</span>4j.properties\r\nsed -i <span class=\"hljs-string\">\'s#log4j.logger.java.sql.PreparedStatement=.*#log4j.logger.java.sql.PreparedStatement=ERROR#g\'</span> <span class=\"hljs-built_in\">log</span>4j.properties\r\nsed -i <span class=\"hljs-string\">\'s#log4j.logger.java.sql.ResultSet=.*#log4j.logger.java.sql.ResultSet=ERROR#g\'</span> <span class=\"hljs-built_in\">log</span>4j.properties\r\nsed -i <span class=\"hljs-string\">\'s#log4j.logger.com.opensymphony.xwork2=.*#log4j.logger.com.opensymphony.xwork2=ERROR#g\'</span> <span class=\"hljs-built_in\">log</span>4j.properties\r\n</code></pre><p><br></p><p>脚本如下(GITHUB链接是<a href=\"https://github.com/staugur/scripts/blob/master/other/ParseConfig2sedcmd.py\" target=\"_blank\">https://github.com/staugur/scripts/blob/master/other/ParseConfig2sedcmd.py</a>)：</p><pre style=\"max-width: 100%;\"><code class=\"python hljs\" codemark=\"1\"><span class=\"hljs-comment\">#!/usr/bin/python</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> os\r\n<span class=\"hljs-keyword\">import</span> sys\r\n<span class=\"hljs-keyword\">import</span> commands\r\n\r\n<span class=\"hljs-comment\">#BASEDIR=os.path.dirname(os.path.abspath(__file__))</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">(filename=None)</span>:</span>\r\n    <span class=\"hljs-keyword\">if</span> filename:\r\n        cmd1=<span class=\"hljs-string\">\"dos2unix %s\"</span>%filename\r\n        cmd2=<span class=\"hljs-string\">\"sed -i -e \'/^#/d\' -e \'/^$/d\' %s\"</span>%filename\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        cmd1=<span class=\"hljs-string\">\"dos2unix *.properties\"</span>\r\n        cmd2=<span class=\"hljs-string\">\"sed -i -e \'/^#/d\' -e \'/^$/d\' *.properties\"</span>\r\n    commands.getoutput(cmd1)\r\n    commands.getoutput(cmd2)\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parse</span><span class=\"hljs-params\">(files=None)</span>:</span>\r\n    d={}\r\n    <span class=\"hljs-keyword\">if</span> files:\r\n        files=(files,)\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        files=os.listdir(<span class=\"hljs-string\">\'.\'</span>)\r\n    <span class=\"hljs-keyword\">for</span> f <span class=\"hljs-keyword\">in</span> files:\r\n        <span class=\"hljs-keyword\">if</span> f == <span class=\"hljs-string\">\'done.py\'</span>:<span class=\"hljs-keyword\">continue</span>\r\n        <span class=\"hljs-keyword\">with</span> open(f, <span class=\"hljs-string\">\'r\'</span>) <span class=\"hljs-keyword\">as</span> _f:\r\n            v=[ _ <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> _f.readlines() <span class=\"hljs-keyword\">if</span> _ ]\r\n            <span class=\"hljs-comment\">#print v</span>\r\n        d[f]=v\r\n    <span class=\"hljs-keyword\">return</span> d\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(d)</span>:</span>\r\n    <span class=\"hljs-keyword\">for</span> k,v <span class=\"hljs-keyword\">in</span> d.iteritems():\r\n        <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"*\"</span> * <span class=\"hljs-number\">50</span>, k, <span class=\"hljs-string\">\"*\"</span> * <span class=\"hljs-number\">50</span>\r\n        i=<span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> v:\r\n            <span class=\"hljs-keyword\">if</span> _.count(<span class=\"hljs-string\">\'#\'</span>) == <span class=\"hljs-number\">0</span>:\r\n                line=_.strip()\r\n                <span class=\"hljs-comment\">#print line</span>\r\n                <span class=\"hljs-keyword\">try</span>:\r\n                    key,value=line.split(<span class=\"hljs-string\">\'=\'</span>)\r\n                <span class=\"hljs-keyword\">except</span> Exception, e:\r\n                    <span class=\"hljs-keyword\">if</span> line.split(<span class=\"hljs-string\">\'=\'</span>)[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">\'http.p3p.policy.header\'</span>:\r\n                        key,value=<span class=\"hljs-string\">\'http.p3p.policy.header\'</span>,line.split(<span class=\"hljs-string\">\'http.p3p.policy.header=\'</span>)[<span class=\"hljs-number\">-1</span>]\r\n                    <span class=\"hljs-keyword\">else</span>:\r\n                        <span class=\"hljs-keyword\">raise</span>\r\n                cmd=<span class=\"hljs-string\">\"sed -i \'s#%s=.*#%s=%s#g\' %s\"</span> %(key, key, value, k)\r\n                <span class=\"hljs-keyword\">print</span> cmd\r\n                commands.getoutput(cmd)\r\n                i+=<span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">print</span> i,len(v),<span class=\"hljs-string\">\'\\n\'</span>\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\r\n    <span class=\"hljs-keyword\">try</span>:\r\n        filename=sys.argv[<span class=\"hljs-number\">1</span>]\r\n    <span class=\"hljs-keyword\">except</span>:\r\n        filename=<span class=\"hljs-keyword\">None</span>\r\n    init()\r\n    main(parse(filename))</code></pre><p><br></p>', '2016-11-01', null, 'python', 'python', '原创', 'taochengwei', 'false', 'false');
INSERT INTO `blog_article` VALUES ('105', 'multiprocessing.dummy多线程模块', '           <p>           </p><p>multiprocessing.dummy&nbsp;replicates&nbsp;the&nbsp;API&nbsp;of&nbsp;multiprocessing&nbsp;but&nbsp;is&nbsp;no&nbsp;more&nbsp;than&nbsp;a&nbsp;wrapper&nbsp;around&nbsp;the&nbsp;threading&nbsp;module.</p><p>以上是python官方文档对<a href=\"https://docs.python.org/2/library/multiprocessing.html#module-multiprocessing.dummy\" target=\"_blank\">multiprocessing.dummy</a>的介绍。</p><p>简单地说，multiprocessing.dummy是multiprocessing多进程模块复制的一个多线程模块，API都是通用的。</p><p>它非常强大！你读取<a href=\"https://github.com/python/cpython/tree/master/Lib/multiprocessing/dummy\" target=\"_blank\">源码</a>会很有收获！</p><p>我尝试用thread模块ssh登录数百台机器获取docker containers用时90s以上；换成multiprocessing.dummy，processes=12，用时7s！</p><p>使用方法：</p><pre><code>from multiprocessing.dummy import Pool as ThreadPool \r\npool = ThreadPool(processes=4)\r\ndata = pool.map(func, args)\r\npool.close()\r\npool.join()\r\n#data = pool.map_async(func, args).get()</code></pre><p><br></p>', '2016-11-01', '2016-12-07', '多线程', 'python', '原创', 'taochengwei', 'false', 'false');
INSERT INTO `blog_article` VALUES ('113', '关于我们', '<p>           </p><p></p><p>           </p><h2><p><b>我是干什么的？</b></p><pre style=\"max-width: 100%;\"><code class=\"coffeescript hljs\" codemark=\"1\">SA，DevOpser</code></pre><p><b>这个站点为什么存在？</b></p><pre style=\"max-width: 100%;\"><code class=\"coffeescript hljs\" codemark=\"1\">记录技术点滴，开源项目源码，分享经验与技术。</code></pre><p><b>本站历程：</b></p><pre style=\"max-width: 100%;\"><code class=\"coffeescript hljs\" codemark=\"1\">Interest.blog之前，\r\n--&gt;最初的PHP(wordpress、emlog等)\r\n--&gt;GitHub Page\r\n--&gt;Python Flask(saintic/blog-&gt;saintic/Team/Front-&gt;Interest.blog)\r\n如果你有好的文章、想法、经验想与大家分享，或者文章有错误，请及时告诉我，欢迎投稿。</code></pre><p><b>如何联系我？</b></p><pre style=\"max-width: 100%;\"><code class=\"coffeescript hljs\" codemark=\"1\">如果还有问题想联系我？比如协同开发项目、谈谈人生聊聊理想啊，OK，我的邮箱是：staugur@saintic.com\r\n或者查看页脚部分的“邮我”按钮，给我们团队发邮件：<span style=\"font-size: 0.8em; color: rgb(17, 17, 17); font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\">developers@saintic.com。</span></code></pre></h2><h2><p><b>Public：</b></p><pre style=\"max-width: 100%;\"><code class=\"coffeescript hljs\" codemark=\"1\">我的GitHub组织代码仓库是--&gt;&gt; https:<span class=\"hljs-regexp\">//gi</span>thub.com/saintic\r\n\r\n我的GitHub私人代码仓库是--&gt;&gt; https:<span class=\"hljs-regexp\">//gi</span>thub.com/staugur\r\n\r\n我的Docker仓库名是staugur--&gt;&gt; docker search staugur\r\n\r\n订阅本站最近更新的文章--&gt;&gt; <a href=\"http://www.saintic.com/blog/200.html\" target=\"_blank\" style=\"font-size: 0.8em; font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;\">http://www.saintic.com/blog/200.html</a></code></pre><p>另外如果你想砸死我，可以扫描下面的二维码试试：\r\n</p></h2><h2><img src=\"https://img.saintic.com/interest.blog/blog/5226820977404714.png\" alt=\"22-24-34-alipay\" class=\"\" style=\"font-size: 16px;\"><br></h2><p></p>\r\n        <p><br></p>', '2016-11-05', '2017-02-03', 'Interest.blog', 'Interest.blog', '原创', 'taochengwei', 'false', 'true');
INSERT INTO `blog_article` VALUES ('138', '介绍一款Markdown富文本编辑器——Editor.md', '<p>           </p><p>           </p><p>           </p><p>Editor.md是国人开发的一款开源在线 Markdown 编辑器。</p><p>官方网址：<a href=\"http://pandao.github.io/editor.md/\" target=\"_blank\">http://pandao.github.io/editor.md/</a><br></p><p>官方文档：<a href=\"https://github.com/pandao/editor.md/blob/master/docs/index.html\" target=\"_blank\">https://github.com/pandao/editor.md/blob/master/docs/index.html</a></p><p>开源地址：<a href=\"https://github.com/pandao/editor.md/\" target=\"_blank\">https://github.com/pandao/editor.md/</a></p><p>主要特性：</p><pre style=\"max-width: 100%;\"><code class=\"markdown hljs\" codemark=\"1\">支持“标准”Markdown / CommonMark和Github风格的语法，也可变身为代码编辑器；\r\n支持实时预览、图片（跨域）上传、预格式文本/代码/表格插入、代码折叠、搜索替换、只读模式、自定义样式主题和多语言语法高亮等功能；\r\n支持ToC（Table of Contents）、Emoji表情、Task lists、@链接等Markdown扩展语法；\r\n支持TeX科学公式（基于KaTeX）、流程图 Flowchart 和 时序图 Sequence Diagram;\r\n支持识别和解析HTML标签，并且支持自定义过滤标签解析，具有可靠的安全性和几乎无限的扩展性；\r\n支持 AMD / CMD 模块化加载（支持 Require.js &amp; Sea.js），并且支持自定义扩展插件；\r\n兼容主流的浏览器（IE8+）和Zepto.js，且支持iPad等平板设备；\r\n支持自定义主题样式；</code></pre><p>Editor.md 的诞生依赖于以下开源项目：</p><pre style=\"max-width: 100%;\"><code class=\"markdown hljs\" codemark=\"1\">CodeMirror\r\nmarked\r\njQuery\r\nFontAwesome\r\ngithub-markdown.css\r\nKaTeX\r\nRephael.js\r\nprettify.js\r\nflowchart.js\r\nsequence-diagram.js\r\nPrefixes.scss</code></pre><p>使用前建议详细看看文档，不过文档似乎并不详细。</p><p>本站当前使用Editor.md，由于文档的问题，暂时不支持图片上传，若想用此功能，请切换至另一款编辑器。</p><p>重大更新:</p><p>Editoe.md已经可以上传图片文件了!</p><p>本站用法，从前台到后台：</p><pre style=\"max-width: 100%;\"><code class=\"python hljs\" codemark=\"1\">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n    &lt;meta charset=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;\r\n    &lt;title&gt;Editor.md&lt;/title&gt;\r\n    &lt;!-- 引入Editor.md.css --&gt;\r\n    &lt;link rel=<span class=\"hljs-string\">\"stylesheet\"</span> type=<span class=\"hljs-string\">\"text/css\"</span> href=<span class=\"hljs-string\">\"{{ url_for(\'static\', filename=\'Editor.md/css/editormd.min.css\') }}\"</span>&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;div&gt;\r\n    &lt;h1&gt;创作文章&lt;/h1&gt;\r\n    &lt;form id=<span class=\"hljs-string\">\"CreateBlogFormId\"</span> method=<span class=\"hljs-string\">\"\"</span> action=<span class=\"hljs-string\">\"\"</span>&gt;\r\n        &lt;p&gt;标题：&lt;input type=<span class=\"hljs-string\">\"text\"</span> name=<span class=\"hljs-string\">\"title\"</span> placeholder=<span class=\"hljs-string\">\"文章标题\"</span> required /&gt;&lt;em style=<span class=\"hljs-string\">\"color:red; front-size:bold\"</span>&gt;*&lt;/em&gt;&lt;/p&gt;\r\n        &lt;p&gt;标签：&lt;input type=<span class=\"hljs-string\">\"text\"</span> name=<span class=\"hljs-string\">\"tag\"</span> placeholder=<span class=\"hljs-string\">\"多个标签以空格分割\"</span> required /&gt;&lt;/p&gt;\r\n        &lt;p&gt;分类：&lt;input type=<span class=\"hljs-string\">\"text\"</span> name=<span class=\"hljs-string\">\"catalog\"</span> placeholder=<span class=\"hljs-string\">\"自定义分类或选择\"</span> list=<span class=\"hljs-string\">\"blog_catalogs\"</span> required /&gt;&lt;/p&gt;\r\n        &lt;datalist id=<span class=\"hljs-string\">\"blog_catalogs\"</span>&gt;\r\n            &lt;option&gt;未分类&lt;/option&gt;\r\n        &lt;/datalist&gt;\r\n        &lt;p&gt;类型：\r\n            &lt;input type=<span class=\"hljs-string\">\"radio\"</span> name=<span class=\"hljs-string\">\"sources\"</span> value=<span class=\"hljs-string\">\"原创\"</span> checked=<span class=\"hljs-string\">\"checked\"</span>&gt;原创\r\n            &lt;input type=<span class=\"hljs-string\">\"radio\"</span> name=<span class=\"hljs-string\">\"sources\"</span> value=<span class=\"hljs-string\">\"转载\"</span>&gt;转载 \r\n            &lt;input type=<span class=\"hljs-string\">\"radio\"</span> name=<span class=\"hljs-string\">\"sources\"</span> value=<span class=\"hljs-string\">\"翻译\"</span>&gt;翻译\r\n        &lt;/p&gt;\r\n        &lt;div id=<span class=\"hljs-string\">\"editor\"</span>&gt;\r\n            &lt;textarea style=<span class=\"hljs-string\">\"display:none;\"</span> name=<span class=\"hljs-string\">\"content\"</span>&gt;<span class=\"hljs-comment\"># 请输入文章内容...&lt;/textarea&gt;</span>\r\n        &lt;/div&gt;\r\n        &lt;input type=<span class=\"hljs-string\">\"hidden\"</span> name=<span class=\"hljs-string\">\"author\"</span> value=<span class=\"hljs-string\">\"{{ g.username }}\"</span>&gt;\r\n        &lt;input type=<span class=\"hljs-string\">\"hidden\"</span> name=<span class=\"hljs-string\">\"editor\"</span> value=<span class=\"hljs-string\">\"Editor.md\"</span>&gt;\r\n        &lt;input onclick=postForm() type=<span class=\"hljs-string\">\"button\"</span> value=<span class=\"hljs-string\">\"提交博客\"</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">button</span> <span class=\"hljs-title\">green</span>\" /&gt;\r\n    &lt;/<span class=\"hljs-title\">form</span>&gt;\r\n&lt;/<span class=\"hljs-title\">div</span>&gt;\r\n&lt;!--引入<span class=\"hljs-title\">jquery</span>和<span class=\"hljs-title\">Editor</span>.<span class=\"hljs-title\">md</span>.<span class=\"hljs-title\">js</span>--&gt;\r\n&lt;script type=\"text/javascript\" src=\"{{ url_for(\'static\', filename=\'js/jquery-3.1.0.min.js\') }}\"&gt;&lt;/script&gt;\r\n&lt;script type=\"text/javascript\" src=\"{{ url_for(\'static\', filename=\'Editor.md/js/editormd.min.js\') }}\"&gt;&lt;/script&gt;\r\n&lt;script type=\"text/javascript\"&gt;\r\n    var Editor;\r\n    $(function() {\r\n        Editor = editormd({\r\n                id      :</span> <span class=\"hljs-string\">\"editor\"</span>,\r\n                width   : <span class=\"hljs-string\">\"100%\"</span>,\r\n                height  : <span class=\"hljs-number\">500</span>,\r\n                syncScrolling : <span class=\"hljs-string\">\"single\"</span>,\r\n                path    : <span class=\"hljs-string\">\"/static/Editor.md/lib/\"</span>,\r\n                /*\r\n                // 开启上传图片功能\r\n                imageUpload : true,\r\n                imageFormats : [<span class=\"hljs-string\">\"jpg\"</span>, <span class=\"hljs-string\">\"jpeg\"</span>, <span class=\"hljs-string\">\"gif\"</span>, <span class=\"hljs-string\">\"png\"</span>, <span class=\"hljs-string\">\"bmp\"</span>, <span class=\"hljs-string\">\"webp\"</span>],\r\n                imageUploadURL : <span class=\"hljs-string\">\"/upload/image/\"</span>,\r\n                */\r\n                emoji : true,                 // Emoji表情\r\n                saveHTMLToTextarea : true,    // 保存 HTML 到 Textarea\r\n                searchReplace : true,\r\n                flowChart : true,             // 开启流程图支持，默认关闭\r\n                sequenceDiagram : true,       // 开启时序/序列图支持，默认关闭,\r\n        });\r\n    });\r\n&lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre><p>其他（后台等）处理方法类似于<a href=\"http://www.saintic.com/blog/136.html\" target=\"_blank\">wangEditor</a>这篇文章。</p>', '2016-11-23', '2017-04-13 23:20', 'markdown 在线文本编辑器 Interest.blog', 'Interest.blog', '原创', 'taochengwei', 'true', 'true');
INSERT INTO `blog_article` VALUES ('204', 'Python抓取花瓣网画板图片', '           <p>################################################################<br></p><p>代码库：<a href=\"https://github.com/staugur/grab_huaban_board/releases/tag/v1.0\" target=\"_blank\">https://github.com/staugur/grab_huaban_board/releases/tag/v1.0</a></p><p>Python抓取花瓣网“画板”的图片，程序稍简陋，后续并发执行(也适用并发)。</p><p><b>发现规律：</b></p><p>1. 画板(board)的title中包含了此画板所有图片(pin)，可以获取到关键信息——画板数量。</p><p>2. 除了首屏的图片外，往下滚动，动态加载时，采用ajax，F12查看Network，发现请求了画板URL+<a href=\"http://huaban.com/boards/29285588/?iw538bzd&max=916733010&amp;limit=20&amp;wfl=1\" target=\"_blank\">/</a>?iw538bzd&amp;max=916733010&amp;limit=20&amp;wfl=1，其中max是当前展现的最后一个图片的pin id，limit是ajax刷新后的图片数量。</p><p>3. pin的URL是http://huaban.com/pins/+pin，可以查看具体大图，查看其HTML源码，能发现以下信息：</p><pre style=\"max-width: 100%;\"><code class=\"html hljs xml\" codemark=\"1\">app[\"page\"] = {\"$url\":\"/pins/939351949/\", \"pin\":{\"pin_id\":939351949, \"user_id\":9880671, \"board_id\":32956845, \"file_id\":122346806, \"file\":{\"bucket\":\"hbimg\", \"key\":\"591ba6953c5912c9d82272b9cc575fe1b04fbe9919a01-tKc4ku\", \"type\":\"image/jpeg\", \"height\":\"640\", \"width\":\"640\", \"frames\":\"1\"}</code></pre><p>这里的规律是以空格为分割，倒数第八段基本是以上代码开端。</p><p><b>实现思路：</b></p><p>根据两个规律可以查出画板board的所有pin，然后查出pin所对应的Imagekey(图片存储在第三方的一个ID)，第三方固定地址：\"http://img.hb.aicdn.com/%s_fw658\" %Imagekey\"。</p><p><b>代码逻辑：</b></p><p>1. 传递“画板ID\"参数，可以直接用sys.argv位置参数，我用了内置模块argparse解析选项参数。</p><pre style=\"max-width: 100%;\"><code class=\"python hljs\" codemark=\"1\"><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\r\n    <span class=\"hljs-keyword\">import</span> argparse\r\n    parser = argparse.ArgumentParser()\r\n    parser.add_argument(<span class=\"hljs-string\">\"-b\"</span>, <span class=\"hljs-string\">\"--board\"</span>, help=<span class=\"hljs-string\">\"The board id for Huanban.com\"</span>, type=int)\r\n    args = parser.parse_args()\r\n    <span class=\"hljs-keyword\">if</span> args.board:\r\n        <span class=\"hljs-keyword\">print</span> GetBoard(args.board)</code></pre><p>2. 获取画板参数后，执行GetBoard函数(传递board)。</p><pre style=\"max-width: 100%;\"><code class=\"python hljs\" codemark=\"1\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">GetBoard</span><span class=\"hljs-params\">(board)</span>:</span>\r\n    代码</code></pre><p>以下代码获取画板所有图片数量，title number：</p><pre style=\"max-width: 100%;\"><code class=\"python hljs\" codemark=\"1\">    <span class=\"hljs-comment\">#get title pin number</span>\r\n    r = requests.get(url, timeout=<span class=\"hljs-number\">15</span>, verify=<span class=\"hljs-keyword\">False</span>, headers=headers)\r\n    title_pat = re.compile(<span class=\"hljs-string\">r\'&lt;title&gt;.*\\((\\d+).*\\).*&lt;/title&gt;\'</span>)\r\n    data=r.text.encode(<span class=\"hljs-string\">\'utf-8\'</span>)\r\n    allimages = re.findall(title_pat, data)[<span class=\"hljs-number\">0</span>]</code></pre><p>以下代码获取首屏图片pins：</p><pre style=\"max-width: 100%;\"><code class=\"python hljs\" codemark=\"1\">    <span class=\"hljs-comment\">#first</span>\r\n    url  = <span class=\"hljs-string\">\"http://huaban.com/boards/%s/?limit=%d\"</span> %(board, int(limit))\r\n    data = requests.get(url, timeout=<span class=\"hljs-number\">10</span>, verify=<span class=\"hljs-keyword\">False</span>, headers=headers).text.encode(<span class=\"hljs-string\">\'utf-8\'</span>)\r\n    pins = [ _[<span class=\"hljs-number\">-1</span>] <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> re.findall(pat, data) <span class=\"hljs-keyword\">if</span> _[<span class=\"hljs-number\">-1</span>] ]</code></pre><p>以下代码不断循环刷新请求，直到获取不到任何pin，则中断：</p><pre style=\"max-width: 100%;\"><code class=\"python hljs\" codemark=\"1\">    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> END:\r\n        <span class=\"hljs-comment\">#ajax</span>\r\n        url  = <span class=\"hljs-string\">\"http://huaban.com/boards/%s/?max=%s&amp;limit=%s&amp;wfl=1\"</span> %(board, pins[<span class=\"hljs-number\">-1</span>], limit)\r\n        data = requests.get(url, timeout=<span class=\"hljs-number\">10</span>, verify=<span class=\"hljs-keyword\">False</span>, headers=headers).text.encode(<span class=\"hljs-string\">\'utf-8\'</span>)\r\n        _pins= [ _[<span class=\"hljs-number\">-1</span>] <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> re.findall(pat, data) <span class=\"hljs-keyword\">if</span> _[<span class=\"hljs-number\">-1</span>] ]\r\n        <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"ajax get %s pins, last pin is %s, merged\"</span> %(len(_pins), pins[<span class=\"hljs-number\">-1</span>])\r\n        _pins= [ _[<span class=\"hljs-number\">-1</span>] <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> re.findall(pat, data) <span class=\"hljs-keyword\">if</span> _[<span class=\"hljs-number\">-1</span>] ]\r\n        pins += _pins\r\n        <span class=\"hljs-keyword\">if</span> len(_pins) == <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-keyword\">break</span></code></pre><p>以上步骤获取到所有pin，结果是list，循环此list，下载每个pin图片保存，这里后续改为multiprocessing.dummy多线程并发，当前顺序执行很慢(哎、Python)。</p><p><b>看看效果：</b></p><p><img src=\"http://img.saintic.com/interest.blog/blog/9238424764200377.png\" alt=\"\" class=\"\"><br></p><p><br></p>\r\n        <p>################################################################<br></p><p>代码库：<a href=\"https://github.com/staugur/grab_huaban_board/releases/tag/v2.0\" target=\"_blank\">https://github.com/staugur/grab_huaban_board/releases/tag/v2.0</a></p><p>版本更新至2.0，变化为：</p><p>1. 获取所有pins，使用multiprocessing.dummy的线程池，线程并发数量可以用-p(--processes)指定，速度大幅度增加；</p><p>2. 记录日志</p><p>################################################################</p><p>代码库：<a href=\"https://github.com/staugur/grab_huaban_board/releases/tag/v3.0\" target=\"_blank\">https://github.com/staugur/grab_huaban_board/releases/tag/v3.0</a></p><p>版本更新至3.0，新功能：</p><p>1. 整体代码调整</p><p>2. 多画板抓取，每个画板一个进程，每个进程用线程池<br></p><p><img src=\"http://img.saintic.com/interest.blog/blog/201701032126317486.png\" alt=\"QQ截图20170103212512\" class=\"\"><br></p>\r\n        <p><br></p>\r\n        <p>################################################################</p><p>代码库：<a href=\"https://github.com/staugur/grab_huaban_board/releases/tag/v4.0\" target=\"_blank\">https://github.com/staugur/grab_huaban_board/releases/tag/v4.0</a></p><p>版本更新至4.0，新功能：</p><p>1. 抓取用户下指定数量(limit)的画板，每个用户开启一个进程，每个用户下每个画板开启子进程，所以limit设置的值切记不要过大，默认10，如果用户有10个以上画板，将只下载10个，开启10个进程，建议不要超过50(根据机器硬件情况)。</p><p>修改此值，需编辑grab_huaban_board.py，GetUserBoards函数，修改limit默认函数值。</p><p>2.多用户抓取</p><p><br></p>\r\n        <p><br></p>', '2016-11-30', '2017-02-10', 'python 爬虫', 'python', '原创', 'taochengwei', 'true', 'true');
INSERT INTO `blog_article` VALUES ('217', '开源项目之SwarmOps', '           <h2 id=\"h2-swarmops-\"><a name=\"SwarmOps正式版终于来了！！\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>SwarmOps正式版终于来了！！</h2><p>Docker使DevOps贴合亲近，官方自带的Swarm多主机调度系统，直接上手，简单粗暴，但是命令的使用、API的使用还是不那么友善(深受其害)，所以这款SwarmOps API&amp;UI来了。</p>\r\n<p>后来改用k8s，于是乎，从2016、10月底开始重构，将原本一个单独的API并且依赖于ssh、etcd的稍重的应用改造了，现在它不仅是Api，更是使用bootstrap构筑的UI，尽可能人性化地展示页面。</p>\r\n<p>传送门：<a href=\"https://github.com/staugur/SwarmOps\" target=\"_blank\">https://github.com/staugur/SwarmOps</a></p><blockquote><p><font color=\"#ff0000\"><b>注意：关键信息！</b></font></p><p>当前文档版本：Release&nbsp;0.0.1, 0.0.2</p></blockquote>\r\n<h4 id=\"h4-release-0-0-1\"><a name=\"Release 0.0.1\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Release 0.0.1</h4><p><em>作为第一个正式发布版本，SwarmOps实现了对Docker Swarm模式的集群管理，所有操作均采用API形式。</em></p>\r\n<pre><code class=\"hljs markdown\" codemark=\"1\"><span class=\"hljs-bullet\">1. </span>UI/API可以初始化、管理多个Swarm集群\r\n<span class=\"hljs-bullet\">2. </span>UI/API可以增删查改服务\r\n<span class=\"hljs-bullet\">3. </span>UI/API可以增删查改节点\r\n<span class=\"hljs-bullet\">4. </span>UI/API可以查询服务的其他属性, 例如replicas节点，并生成Nginx样例配置\r\n<span class=\"hljs-bullet\">5. </span>数据持久化存储local或redis, 使用redis可以多点部署\r\n<span class=\"hljs-bullet\">6. </span>认证采用passport, 并设置只允许登陆的用户列表\r\n</code></pre><p>Relase 0.0.2</p><p><i>这一版本主题是UI</i></p><pre style=\"max-width: 100%;\"><code class=\"python hljs\" codemark=\"1\"><span class=\"hljs-number\">1.</span> UI大部分功能重磅更新, 采用layer弹层方式取消跳转\r\n<span class=\"hljs-number\">2.</span> UI集成私有仓, 支持V1版本, 查删操作\r\n<span class=\"hljs-number\">3.</span> network查询\r\n</code></pre><p>部署文档链接： <a href=\"http://www.saintic.com/blog/215.html\">http://www.saintic.com/blog/215.html</a><br>PS: 如果你想在物理机体验, 那么</p><pre style=\"max-width: 100%;\"><code class=\"bash hljs\" codemark=\"1\">wget -c -O SwarmOps-v0.0.2.tar.gz <span class=\"hljs-string\">\"https://codeload.github.com/staugur/SwarmOps/tar.gz/v0.0.2\"</span>\r\ntar zxf SwarmOps-v0.0.2.tar.gz\r\n<span class=\"hljs-built_in\">cd</span> SwarmOps-0.0.2/\r\npip install -r requirements.txt\r\n<span class=\"hljs-built_in\">cd</span> src\r\n<span class=\"hljs-comment\">#####注意以下注释行，g.auth=True，代表不需要验证，供快速测试，避免正式环境使用####</span>\r\n<span class=\"hljs-comment\">#main.py，找到这一行：</span>\r\n<span class=\"hljs-comment\">#g.auth     = isLogged_in(\'.\'.join([ g.username, g.expires, g.sessionId ]))</span>\r\n<span class=\"hljs-comment\">#改为g.auth = True，启动即可去掉验证。</span>\r\npython main.py</code></pre>\r\n<p>PS: 如果你有docker环境，快速启动，注意环境变量(更多内容参考部署文档链接)：</p><pre style=\"max-width: 100%;\"><code class=\"bash hljs\" codemark=\"1\"><span class=\"hljs-comment\">#V0.0.1</span>\r\ndocker run -tdi --name swarmops --net=host --restart=always registry.saintic.com/github/swarmops:v0.0.1\r\n<span class=\"hljs-comment\">#V0.0.2</span>\r\ndocker run -tdi --name swarmops --net=host --restart=always registry.saintic.com/github/swarmops:v0.0.2</code></pre><p>以下是相关UI展示： </p>\r\n<p><a href=\"https://img.saintic.com/interest.blog/blog/swarm.png\"><img src=\"https://img.saintic.com/interest.blog/blog/swarm.png\" alt=\"\" class=\"\"></a></p>\r\n<p><a href=\"https://img.saintic.com/interest.blog/blog/service.png\"><img src=\"https://img.saintic.com/interest.blog/blog/service.png\" alt=\"\"></a></p>\r\n<p><a href=\"https://img.saintic.com/interest.blog/blog/node.png\"><img src=\"https://img.saintic.com/interest.blog/blog/node.png\" alt=\"\"></a></p>\r\n\r\n<p><a href=\"https://img.saintic.com/interest.blog/blog/network.png\"><img src=\"https://img.saintic.com/interest.blog/blog/network.png\" alt=\"\" class=\"\"></a></p>\r\n<p><a href=\"https://img.saintic.com/interest.blog/blog/registry.png\"><img src=\"https://img.saintic.com/interest.blog/blog/registry.png\" alt=\"\" class=\"\"></a></p>\r\n<p><em>API文档加紧更新中</em></p>\r\n        <p><img src=\"https://img.saintic.com/interest.blog/blog/201701112153372023.png\" alt=\"SwarmOpsApi\"><br></p><p><br></p>\r\n        <p><br></p>', '2017-01-11', '2017-03-01', 'SwarmOps 开源项目', '开源项目', '原创', 'taochengwei', 'true', 'false');
INSERT INTO `blog_article` VALUES ('220', '哈哈哈', '<p></p><p></p><p></p><p></p><p></p><h1 id=\"h1--img-src-https-img-saintic-com-eaudouce-test-201704172253282518-jpeg-alt-\"><img src=\"http://127.0.0.1:10140/static/img/upload/201704201328202141.jpeg\" alt=\"618471806\" style=\"font-size: 14px; max-width: 100%;\"><img src=\"http://127.0.0.1:10140/static/img/upload/201704201328201745.jpeg\" alt=\"501823338\" style=\"font-size: 14px; max-width: 100%;\"><img src=\"http://127.0.0.1:10140/static/img/upload/201704201328203770.jpeg\" alt=\"311576471\" style=\"font-size: 14px; max-width: 100%;\"><img src=\"http://127.0.0.1:10140/static/img/upload/201704201328206435.jpeg\" alt=\"300148986\" style=\"font-size: 14px; max-width: 100%;\"><img src=\"http://127.0.0.1:10140/static/img/upload/201704201328206610.jpeg\" alt=\"618427428\" style=\"font-size: 14px; max-width: 100%;\"><img src=\"http://127.0.0.1:10140/static/img/upload/201704201328213538.jpeg\" alt=\"646653184\" style=\"font-size: 14px; max-width: 100%;\"><br></h1>', '2017-04-17 22:53', '2017-04-20 13:28', '', '未分类', '原创', 'taochengwei', 'false', 'true');

-- ----------------------------
-- Table structure for blog_catalog
-- ----------------------------
DROP TABLE IF EXISTS `blog_catalog`;
CREATE TABLE `blog_catalog` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `catalog` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_catalog
-- ----------------------------
INSERT INTO `blog_catalog` VALUES ('1', 'Python');
INSERT INTO `blog_catalog` VALUES ('2', 'Shell');
INSERT INTO `blog_catalog` VALUES ('3', '运维工具');
INSERT INTO `blog_catalog` VALUES ('4', '运维开发');
INSERT INTO `blog_catalog` VALUES ('5', 'NoSQL');

-- ----------------------------
-- Table structure for blog_clicklog
-- ----------------------------
DROP TABLE IF EXISTS `blog_clicklog`;
CREATE TABLE `blog_clicklog` (
  `id` int(6) NOT NULL AUTO_INCREMENT,
  `requestId` varchar(36) COLLATE utf8_unicode_ci NOT NULL,
  `url` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `agent` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `method` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `ip` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `status_code` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `referer` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of blog_clicklog
-- ----------------------------

-- ----------------------------
-- Table structure for sys_config
-- ----------------------------
DROP TABLE IF EXISTS `sys_config`;
CREATE TABLE `sys_config` (
  `about_awi` varchar(30) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '一句话介绍本站',
  `about_ww` varchar(140) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '站长的话',
  `about_address` varchar(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '地址',
  `about_phone` char(11) DEFAULT NULL COMMENT '手机号',
  `about_email` varchar(30) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL COMMENT '邮件',
  `about_beian` varchar(30) DEFAULT NULL,
  `seo_keywords` varchar(20) DEFAULT NULL,
  `seo_description` varchar(100) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of sys_config
-- ----------------------------
INSERT INTO `sys_config` VALUES ('SaintIC, Inc.', '记录技术点滴，开源项目源码，分享经验与技术。', 'Beijing China', '18201707941', 'staugur@saintic.com', '京ICP备14058611号 ', '博客,blog,Interest,IT', 'Linux,NoSQL,DevOps,python,Docker,redis,memcache,MongoDB,LVS,HA,LB,puppet,ansible,func,Cloud,BigData');

-- ----------------------------
-- Table structure for sys_friendlink
-- ----------------------------
DROP TABLE IF EXISTS `sys_friendlink`;
CREATE TABLE `sys_friendlink` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `link` varchar(255) NOT NULL,
  `title` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of sys_friendlink
-- ----------------------------
INSERT INTO `sys_friendlink` VALUES ('1', 'http://www.saintic.com', 'Interest.blog，兴趣和爱好开发的基于flask的个人技术博客');
INSERT INTO `sys_friendlink` VALUES ('2', 'https://api.saintic.com', '独立的接口项目，提供RESTFul Api。');

-- ----------------------------
-- Table structure for sys_notice
-- ----------------------------
DROP TABLE IF EXISTS `sys_notice`;
CREATE TABLE `sys_notice` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `msg` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of sys_notice
-- ----------------------------
INSERT INTO `sys_notice` VALUES ('1', '各位用户好，本站博客由原本Interest.blog全站更新设计为EauDouce，请多关注哈。');
INSERT INTO `sys_notice` VALUES ('2', '大家好，我的新小说，仙侠类型，在起点发布了，大家点击阅读看看，<a href=\"http://book.qidian.com/info/1006131491\" target=\"_blank\">点我跳转</a>');

-- ----------------------------
-- Table structure for user_lauth
-- ----------------------------
DROP TABLE IF EXISTS `user_lauth`;
CREATE TABLE `user_lauth` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `lauth_username` varchar(30) COLLATE utf8_unicode_ci NOT NULL,
  `lauth_password` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`,`lauth_username`),
  UNIQUE KEY `username` (`lauth_username`) USING BTREE,
  UNIQUE KEY `id` (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of user_lauth
-- ----------------------------
INSERT INTO `user_lauth` VALUES ('1', 'admin', '21232f297a57a5a743894a0e4a801fc3');
INSERT INTO `user_lauth` VALUES ('2', 'taochengwei', '8879168cbf8a9e11c296530803e93308');

-- ----------------------------
-- Table structure for user_oauth
-- ----------------------------
DROP TABLE IF EXISTS `user_oauth`;
CREATE TABLE `user_oauth` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `oauth_username` varchar(30) COLLATE utf8_unicode_ci NOT NULL,
  `oauth_type` varchar(9) COLLATE utf8_unicode_ci NOT NULL,
  `oauth_openid` varchar(41) COLLATE utf8_unicode_ci NOT NULL,
  `oauth_access_token` varchar(40) COLLATE utf8_unicode_ci NOT NULL,
  `oauth_expires` varchar(10) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`,`oauth_username`),
  UNIQUE KEY `openid` (`oauth_openid`) USING BTREE,
  UNIQUE KEY `id` (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of user_oauth
-- ----------------------------

-- ----------------------------
-- Table structure for user_profile
-- ----------------------------
DROP TABLE IF EXISTS `user_profile`;
CREATE TABLE `user_profile` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(32) COLLATE utf8_unicode_ci NOT NULL,
  `email` varchar(50) COLLATE utf8_unicode_ci DEFAULT NULL,
  `cname` varchar(25) COLLATE utf8_unicode_ci DEFAULT NULL,
  `avatar` varchar(300) COLLATE utf8_unicode_ci DEFAULT NULL,
  `cover` varchar(300) COLLATE utf8_unicode_ci DEFAULT '/static/img/bg.jpg' COMMENT '''封面''',
  `motto` varchar(200) COLLATE utf8_unicode_ci DEFAULT NULL,
  `url` varchar(50) COLLATE utf8_unicode_ci DEFAULT NULL,
  `time` varchar(10) COLLATE utf8_unicode_ci DEFAULT NULL,
  `weibo` varchar(30) COLLATE utf8_unicode_ci DEFAULT NULL,
  `github` varchar(30) COLLATE utf8_unicode_ci DEFAULT NULL,
  `gender` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `extra` text COLLATE utf8_unicode_ci,
  `isAdmin` varchar(5) COLLATE utf8_unicode_ci DEFAULT 'false' COMMENT '是否为管理员',
  `isAuthor` varchar(5) COLLATE utf8_unicode_ci DEFAULT 'false' COMMENT '是否为作者',
  PRIMARY KEY (`id`,`username`),
  UNIQUE KEY `username` (`username`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of user_profile
-- ----------------------------
INSERT INTO `user_profile` VALUES ('1', 'admin', 'staugur@saintic.com', '迷迷糊糊de管理员', '/static/img/upload/201704222118114355.jpg', '/static/img/upload/201704222104445935.jpg', 'Men always fight alone, always in the challenge of their own.', 'https://www.saintic.com', '2016-10-14', 'https://weibo.com/staugur', 'https://github.com/staugur', '男', 'Administrator', 'true', '0');
INSERT INTO `user_profile` VALUES ('1', 'taochengwei', 'staugur@saintic.com', '管理员', '/static/img/upload/201704222010197385.jpeg', '/static/img/bg.jpg', 'Men always fight alone, always in the challenge of their own.', 'http://www.saintic.com', '2016-10-14', 'http://weibo.com/staugur', 'github.com/staugur', '男', 'Administrator', 'true', '0');
